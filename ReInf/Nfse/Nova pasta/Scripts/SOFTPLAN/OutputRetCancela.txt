{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _ListFields : TStringList;
  _Motivo, _Xml: String;

  function GetCodigo(const aXML: string): string;
  var
   _Cod : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="Codigo"]',_Cod) then
      result := _Cod
    else
      result := '';
  end;

  function GetMensagem(const aXML: string) : string;
  var
      _Mensagem : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="message"]',_Mensagem) then
      result := _Mensagem
    else
      result := '';
  end;

  function GetCorrecao(const aXML: string) : string;
  var
    _Correcao : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="Correcao"]',_Correcao) then
        result := _Correcao
      else
       result := '';
  end;

  function GetMotivo(const aXML: string) : string;
  var
   _XML: string;
  begin
    if Params.Values['faultstring'] <> '' then
  begin
    Result := 'Falha na comunicação com WebService-' + Input;
  end
    else
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="message"]',_XML) then
    begin
      if (result = '') then
           result := Format3('%s-%s (%s)', GetCodigo(aXML),
                        Trim(GetMensagem(aXML)),
                        Trim(GetCorrecao(aXML)))
      else
        result := Format4('%s: %s-%s (%s)', Result, GetCodigo(aXML),
                          Trim(GetMensagem(aXML)),
                          Trim(GetCorrecao(aXML)));

      end;
  end;
  end;

  function GetDataCancelamento(const aXML: string) : string;
  var
    _DataCancelamento : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="xmlNfpse"]//*[local-name()="dataCancelamento"]',_DataCancelamento) then
        result := _DataCancelamento
      else
       result := '';
  end;


  function GetStatus : string;
  begin
    if (_Motivo <> '') or (Params.Values['faultstring'] <> '') then
      result := 'ERRO'
    else
      result := 'SUCESSO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    result := TStringList.Create;
    result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
  // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  _Xml := Params.Values['XmlNFSe'];
  _Motivo := GetMotivo(_XML);

  Progress('Adicionando valores aos campos.');
  _ListFields := CreateFieldsResponse;
  if _ListFields <> nil then
  Try
    AddValueListFields('Motivo',_Motivo);
    AddValueListFields('Status', GetStatus);
    AddValueListFields('DataCancelamento',GetDataCancelamento(_XML));
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;

end.

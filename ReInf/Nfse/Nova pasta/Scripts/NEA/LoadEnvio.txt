{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}
var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _inicio: Integer;
  _PadraoTecnoNFSe: Boolean;
  _linha: string;
  _NomeCampo: string;
  _ValorCampo: string;
  _PastaTecnoNFSe: string;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _Vlr: Double;
  _cdsCidades: TClientDataSet;
  _QtdeRps: Integer;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_LOTE = 'EnviarLoteRpsEnvio';
  DSCIDADE_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\BuscarInfoCidade.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\AbreArquivos.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;
  _cdsCidades := TClientDataSet.Create(nil);

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      AbreArquivos(_PastaTecnoNFSe + 'Cidades.db', _cdsCidades);

      // Passar dados para o Datasets, convertendo do padrão TecnoNFSe para o padrão da Cidade

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      // Começar com as notas
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        if CampoTecno('IdRps') <> '' then
          SetarCampo('IdRps')
        else
        begin
          _ValorCampo := 'RPS_' + CampoTecno('NumeroRps') + '_' + CampoTecno('SerieRps') + '_' + CampoTecno('TipoRps');
          SetarCampoValor('IdRps', _ValorCampo);
        end;

        SetarCampo('NumeroRps');
        SetarCampo('SerieRps');
        SetarCampo('TipoRps');

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('DataEmissao', _ValorCampo);
        end;

        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao')
        else
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('Competencia');
          end;
        end;
        if _ValorCampo <> '' then
          SetarCampoValor('Competencia', _ValorCampo);

        SetarCampo('OptanteSimplesNacional');
        SetarCampo('IncentivoFiscal');

        SetarCampoValor('Status', CampoTecno('SituacaoNota'));

        if (AnsiMatchText(CampoTecno('RegimeEspecialTributacao'), ['1', '2', '3', '4', '5', '6'])) then
          SetarCampo('RegimeEspecialTributacao');

        SetarCampo('NumeroRpsSubstituido');
        SetarCampo('SerieRpsSubstituido');
        SetarCampo('TipoRpsSubstituido');

        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', False);
        SetarCampoCurrency('ValorPis', False);
        SetarCampoCurrency('ValorCofins', False);
        SetarCampoCurrency('ValorInss', False);
        SetarCampoCurrency('ValorIr', False);
        SetarCampoCurrency('ValorCsll', False);
        SetarCampoCurrency('ValorIss', False);

        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        SetarCampoCurrency('OutrasRetencoes', False);
        SetarCampoCurrency('DescontoIncondicionado', False);
        SetarCampoCurrency('DescontoCondicionado', False);

        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
          SetarCampo('ExigibilidadeIss')
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
        SetarCampo('MunicipioIncidencia');

        // Para Cidades NEA, 5% = 5
        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _Vlr := AnyCurrencyToCurrency(StringReplace(CampoTecno('AliquotaISS'),',','.',[rfReplaceAll]));
          _ValorCampo := FormataFloat( _Vlr, 5, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          RaiseException('Valor inválido para o campo AliquotaISS.');

        _ValorCampo := CampoTecno('CodigoItemListaServico');
        _ValorCampo := FormatarCodigoItemListaServico(_ValorCampo, True);  // NEA: com ponto no ItemListaServico
        SetarCampoValor('ItemListaServico', _ValorCampo);

        SetarCampo('CodigoCnae');
        SetarCampo('CodigoTributacaoMunicipio');
        SetarCampo('ResponsavelRetencao');
        SetarCampo('CodigoPais');
        SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));

        SetarCampoValor('Discriminacao', CampoTecno('DiscriminacaoServico'));

        SetarCampoValor('CodigoMunicipio', CampoTecno('CodigoCidadePrestacao'));

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        SetarCampoCpfCnpj('CpfPrestador', 'CnpjPrestador', _ValorCampo);
        SetarCampoValor('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')));

        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        SetarCampoCpfCnpj('CpfTomador', 'CnpjTomador', _ValorCampo);
        SetarCampo('RazaoSocialTomador');
        SetarCampoValor('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')));
        SetarCampo('EnderecoTomador');
        SetarCampo('NumeroTomador');
        SetarCampo('ComplementoTomador');
        SetarCampo('BairroTomador');
        SetarCampoValor('CodigoMunicipioTomador', CampoTecno('CodigoCidadeTomador'));

        if CampoTecno('UfTomador') <> '' then
          SetarCampo('UfTomador')
        else
        begin
          _ValorCampo := BuscarInfoCidade('CodIBGE', CampoCidade('CodigoMunicipioTomador'), 'UF');
          SetarCampoValor('UfTomador', _ValorCampo);
        end;

        SetarCampo('CepTomador');
        VerificaDDD('TelefoneTomador', 'TelefoneTomador', 'DDDTomador');
        SetarCampo('EmailTomador');

        SetarCampo('RazaoSocialIntermediario');
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        case Length(_ValorCampo) of
          0 : { Campo vazio, ignorar };
          11: SetarCampoValor('CpfIntermediario', _ValorCampo);
          14: SetarCampoValor('CnpjIntermediario', _ValorCampo);
        else
          RaiseException('Valor inválido para o campo CpfCnpjIntermediario');
        end;

        SetarCampoValor('InscricaoMunicipalIntermediario', RemoveMascara(CampoTecno('InscricaoMunicipalIntermediario')));

        SetarCampo('CodigoObra');
        SetarCampo('Art');

        _DsCidadeAtual.Post;

        _DsTecnoAtual.Next;
      end;

      SetarCamposMunicipio;
      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);

      // IdLote é deduzível do NumeroLote
      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote')
      else
      begin
        _ValorCampo := 'LOTE_' + CampoTecno('NumeroLote');
        SetarCampoValor('IdLote', _ValorCampo);
      end;

      SetarCampo('NumeroLote');
      if CampoTecno('CpfCnpjRemetente') <> '' then
        SetarCampoValor('Cnpj', RemoveMascara(CampoTecno('CpfCnpjRemetente')))
      else
        SetarCampoValor('Cnpj', RemoveMascara(TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString));

      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('InscricaoMunicipalPrestador').AsString;
      SetarCampoValor('InscricaoMunicipal', RemoveMascara(_ValorCampo));

      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)
      else
        SetarCampoValor('Versao', '2.01');

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
    begin
      Datasets.LoadFromTx2Content(_Tx2.Text);
    end;
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    _cdsCidades.Free;
    Progress('Arquivo TX2 carregado com Sucesso');
  end;
end.

  {$I ..\Comuns\Comuns.TXT}

  procedure GetPonteirosDataSetsXpath(const aDataSetNameSucesso : string;  const aDataSetNamesFalha : TStringList;
    var aDSSucesso, aDSFalha, aDSFalhaLote, aDSAlerta : TSpdXSDClientDataSet);
  begin
    aDSSucesso := Datasets.GetDataSetByName(aDataSetNameSucesso);

    aDSFalha := Datasets.GetDataSetByXpath(aDataSetNamesFalha[0]);
    aDSFalhaLote := Datasets.GetDataSetByXpath(aDataSetNamesFalha[1]);
    aDSAlerta := Datasets.GetDataSetByXpath(aDataSetNamesFalha[2]);

    if (aDSSucesso = nil) then
      RaiseException('DataSet ' + aDataSetNameSucesso + ' não foi carregado corretamente.');

    if (aDSFalha = nil) then
      RaiseException('DataSet ' + aDataSetNamesFalha[0] + ' não foi carregado corretamente.');

    if (aDSFalhaLote = nil) then
      RaiseException('DataSet ' + aDataSetNamesFalha[1] + ' não foi carregado corretamente.');

    if (aDSAlerta = nil) then
      RaiseException('DataSet ' + aDataSetNamesFalha[2] + ' não foi carregado corretamente.');
  end;

  function GetXmlNFSe(const aXpath, aParamName : string) : string;
  begin
    if aXpath = '' then
      Result := XmlSelect(Params.Values[aParamName], '//*[local-name()="CompNfse"]')
    else
      Result := XmlSelect(Params.Values[aParamName], aXpath);

    Result := StringReplace(Result, '&lt;br /&gt;', '|', [rfReplaceAll]);
    Result := StringReplace(Result, '&amp;lt;br /&amp;gt;', '|', [rfReplaceAll]);
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;


  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult(aListFieldsResult) + #13#10
    else
      Result := FormatLineResult(aListFieldsResult) +
        Params.Values['DelimitadorDaLinha'];
  end;

  function RetornouNota(aXmlLote: string): Boolean;
  var
    _str: string;
  begin
    Result := XmlSelectNodeValue(aXmlLote, '//*[local-name() = "CompNfse"]', _str);
  end;


  function GetListFieldsNota(var aDSSucesso, aDSFalha : TSpdXSDClientDataSet;
    var aListFields : TStringList; const aXpathNFSe, aParamName : string): String;
  var
    _Motivo, _ValorCampo, _XmlNota: string;
  begin
    _Motivo := GetMotivo(aDSFalha);
    if RetornouNota(Params.Values[aParamName]) then
    begin
      aDSSucesso.First;
      while not aDSSucesso.Eof do
      begin
        aListFields := CreateFieldsResponseNota;
        try
          AddValueListFields('Motivo', '', aListFields);
          AddValueListFields('Status', 'SUCESSO', aListFields);
          _ValorCampo := aDSSucesso.FieldByName('Cnpj').AsString;

          if _ValorCampo <> '' then
            AddValueListFields('Cnpj', _ValorCampo, aListFields)
          else
            AddValueListFields('Cnpj', aDSSucesso.FieldByName('CnpjPrestador').AsString,
              aListFields);

          _ValorCampo := aDSSucesso.FieldByName('InscricaoMunicipal').AsString;

          if _ValorCampo <> '' then
            AddValueListFields('InscMunicipal', _ValorCampo, aListFields)
          else
            AddValueListFields('InscMunicipal',
              aDSSucesso.FieldByName('InscMunicipalPrestador').AsString, aListFields);

          AddValueListFields('SerieRps',  aDSSucesso.FieldByName('SerieRPS').AsString,
            aListFields);
          AddValueListFields('NumeroRps', aDSSucesso.FieldByName('NumeroRps').AsString,
            aListFields);
          AddValueListFields('NumeroNFSe', aDSSucesso.FieldByName('NumeroNfse').AsString,
            aListFields);
          AddValueListFields('DataEmissaoNFSe', aDSSucesso.FieldByName('DataEmissaoNfse').AsString,
            aListFields);
          AddValueListFields('DataAutorizacao', aDSSucesso.FieldByName('DataEmissaoNfse').AsString,
            aListFields);
          AddValueListFields('CodVerificacao',
            aDSSucesso.FieldByName('CodigoVerificacao').AsString, aListFields);

          _ValorCampo := aDSSucesso.FieldByName('DataHoraCancelamento').AsString;

          If _ValorCampo <> '' then
            AddValueListFields('Situacao', 'CANCELADA', aListFields)
          else
            AddValueListFields('Situacao', 'AUTORIZADA', aListFields);

          AddValueListFields('DataCancelamento', _ValorCampo, aListFields);

          AddValueListFields('ChaveCancelamento', aDSSucesso.FieldByName('NumeroNfse').AsString,
            aListFields);

          _XmlNota := GetXmlNFSe(Format1(aXpathNFSe, aDSSucesso.FieldByName('NumeroNfse').AsString),
            aParamName);

          AddValueListFields('Xml', _XmlNota, aListFields);

          AddValueListFields('Tipo', aDSSucesso.FieldByName('TipoRPS').AsString, aListFields);

          Result := Result + GetResult(aListFields);
        Finally
          aListFields.Free;
        end;
        aDSSucesso.Next;
      end;
    end
    else
    begin
      aListFields := CreateFieldsResponseNota;
      try
        AddValueListFields('Motivo', _Motivo, aListFields);
        AddValueListFields('Status', 'ERRO', aListFields);
        AddValueListFields('Cnpj', '', aListFields);
        AddValueListFields('InscMunicipal', '', aListFields);
        AddValueListFields('SerieRps',  '', aListFields);
        AddValueListFields('NumeroRps', '', aListFields);
        AddValueListFields('NumeroNFSe', '', aListFields);
        AddValueListFields('DataEmissaoNFSe', '', aListFields);
        AddValueListFields('DataAutorizacao', '', aListFields);
        AddValueListFields('CodVerificacao', '', aListFields);
        AddValueListFields('Situacao', '', aListFields);
        AddValueListFields('DataCancelamento', '', aListFields);
        AddValueListFields('ChaveCancelamento', '', aListFields);
        AddValueListFields('Xml', '', aListFields);
        AddValueListFields('Tipo', '', aListFields);
        Result := Result + GetResult(aListFields);
      Finally
        aListFields.Free;
      end;
    end;
  end;

  function GetListFieldsFaulstring(var aListFields : TStringList; const aInput: string): String;
  var
    _Motivo: string;
  begin
    aListFields := CreateFieldsResponseFalha;
    try
      _Motivo := 'Falha na comunicação com WebService-' + GetFaultString(aInput);
      AddValueListFields('Status', 'ERRO', aListFields);
      AddValueListFields('Motivo',_Motivo, aListFields);
      Result := FormatLineResult(aListFields) + Params.Values['DelimitadorDaLinha'];
    Finally
      aListFields.Free;
    end;
  end;

  function UnindentXml(const aXml: string): string;
  var
    _sl: TStringList;
    i: integer;
  begin
    _sl := TStringList.Create;
    _sl.Text := aXml;
    for i:= 0 to _sl.Count-1 do
      _sl[i] := Trim(_sl[i]);
    Result := StringReplace(_sl.Text, #13#10, '', [rfReplaceAll]);
    _sl.Free;
  end;

  // Retorno do cancelamento de certas cidades não vem de acordo com o esquema, fazer ajustes
  function CorrigirCancelamentoRetorno(const aXml: string): string;
  begin
    Result := StringReplace(aXml, 'ConfirmacaoCancelamento>', 'Confirmacao>', [rfReplaceAll]);
    Result := StringReplace(Result, '<PedidoCancelamento>', '<Pedido>', [rfReplaceAll]);
    Result := StringReplace(Result, '</PedidoCancelamento>', '</Pedido>', [rfReplaceAll]);
  end;


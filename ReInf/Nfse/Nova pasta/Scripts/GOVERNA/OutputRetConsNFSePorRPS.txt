{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}

Var
  _NFSE : TSpdXSDClientDataSet;
  _ListFields : TStringList;

  procedure GetPonteirosDataSets;
  begin
    _NFSE := Datasets.GetDataSetByName('tcRetornoConsultaRPS');
    if (_NFSE = nil) then
      RaiseException('DataSet não foi carregado corretamente.');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue: string): string;
  begin
    Result := StringReplace(aValue, Params.Values['DelimitadorDoCampo'], '', [rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'], '', [rfReplaceAll]);
    Result := StringReplace(Result, #13, '', [rfReplaceAll]);
    Result := StringReplace(Result, #10, '', [rfReplaceAll]);
  end;

  function GetMotivo: string;
  var
    _Codigo, _Mensagem: string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else
    begin
      // Falha de XML: erro vai no dataset tcRetornoLoteRps
      if _NFSE.FieldByName('MotivoCodigo').AsString = 'F' then
      begin
        _Codigo := 'F';
        _Mensagem := Trim(_NFSE.FieldByName('MotivoMensagem').AsString);
      end
      else
      begin
        // XML OK, mas com erro de dados (ex: duplicidade): dataset tcInfRetRps
        _Codigo := _NFSE.FieldByName('tsFlgRet').AsString;
        _Mensagem := _NFSE.FieldByName('tsDesOco').AsString;
      end;

      if _Mensagem <> 'RPS já Importado.' then
        Result := Format2('%s-%s ()', _Codigo, _Mensagem)
      else
        Result := '';
    end;
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetStatus : string;
  begin
    if (Params.Values['faultstring'] = '') and (GetMotivo = '') then
      Result := 'SUCESSO'
    else
      Result := 'ERRO';
  end;

  function GetSituacaoNFSE : string;
  begin
    if _NFSE.FieldByName('tsDesOco').AsString <> 'RPS já Importado.' then
      Result := 'ERRO'
    else
      Result := 'AUTORIZADA';
  end;

  function GetXmlNFSe : string;
  begin
    Result := Params.Values['Xml'];
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13#10, '|', [rfReplaceAll]);
    Result := StringReplace(Result, #13, '|', [rfReplaceAll]);
    Result := StringReplace(Result, #10, '|', [rfReplaceAll]);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSets;
  _ListFields := CreateFieldsResponse;
  if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
  try
    Progress('Adicionando valores aos campos.');
    AddValueListFields('Status', GetStatus);
    AddValueListFields('Motivo', GetMotivo);
    AddValueListFields('Cnpj', '');
    AddValueListFields('InscMunicipal', '');
    AddValueListFields('SerieRps', '');
    AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
    AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
    AddValueListFields('DataEmissaoNFSe', '');
    AddValueListFields('DataAutorizacao', '');
    AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
    AddValueListFields('Situacao', GetSituacaoNFSe);
    AddValueListFields('DataCancelamento', '');
    AddValueListFields('ChaveCancelamento', _NFSE.FieldByName('NumeroNFSe').AsString);
    AddValueListFields('Xml', GetXmlNFSe);
    // Consideraremos o código de verificação como sendo também o tipo
    AddValueListFields('Tipo', _NFSE.FieldByName('CodVerificacao').AsString);

    Output := FormatLineResult;
  finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;
end.

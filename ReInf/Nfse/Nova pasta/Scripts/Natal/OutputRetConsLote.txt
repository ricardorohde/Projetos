{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}

var
  _NFSE, _DSFalha: TSpdXSDClientDataSet;
  _ListFields: TStringList;
  _Motivo, _DataAutorizacao, _Status: String;

procedure GetPonteirosDataSets;
begin
  _NFSE := Datasets.GetDataSetByName('CompNfse');
  _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
  if (_NFSE = nil) then
    RaiseException('DataSet CompNfse não foi carregado corretamente.');
  if (_DSFalha = nil) then
    RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
end;

function GetMotivo: string;
var
  _faultstring: string;
begin
  if Params.Values['faultstring'] <> '' then
  begin
    _faultstring := StringReplace(Input, #13#10, '', [rfReplaceAll]);
    Result := 'Falha na comunicação com WebService-' + _faultstring;
  end
  else if (_DSFalha <> nil) then
  begin
    _DSFalha.First;
    while Not _DSFalha.Eof do
    begin
      if (Result = '') then
        Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
          Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
          Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
      else
        Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
          Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
          Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
      _DSFalha.Next;
    end;
  end;
end;

function GetSituacaoNFSE: string;
begin
  if (_NFSE.FieldByName('DataCancelamento').AsString = '') then
  begin
    if (_DSFalha.FieldByName('MotivoMensagem').AsString <> '') or (Params.Values['faultstring'] <> '') then
      Result := 'ERRO'
    else
      Result := 'AUTORIZADA';
  end
  else
    Result := 'CANCELADA';
end;

function GetChaveCancelamento: string;
begin
  // No caso de Natal é o mesmo numero da Nota conf. HelpExtra do componente
  Result := _NFSE.FieldByName('NumeroNFSe').AsString;
end;

// Função para Capturar a Ordem dos Campos do Params
function CreateFieldsResponse: TStringList;
var
  _i: Integer;
begin
  Result := TStringList.Create;
  Result.Text := StringReplace(Params.Values['ListaCampos'], ',', #13#10, [rfReplaceAll]);
  // Checar se os campos da ListaCampos são suportados
  for _i := 0 to Result.Count - 1 do
  begin
    if not AnsiMatchText(Trim(Result[_i]), ['Status', 'Motivo', 'Cnpj', 'InscMunicipal', 'SerieRps',
      'NumeroRps', 'NumeroNFSe', 'DataEmissaoNFSe', 'DataAutorizacao', 'CodVerificacao', 'Situacao',
      'DataCancelamento', 'ChaveCancelamento', 'Xml', 'Tipo']) then
      RaiseException('Campo "' + Result[_i] + '" não suportado')
    else
      Result[_i] := Trim(Result[_i]);
  end;
end;

// Função que passa o valor a lista de resultado
procedure AddValueListFields(const aParamName, aValue: string);
begin
  if _ListFields.IndexOf(aParamName) > -1 then
    _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
end;

// Função que formata a lista em resposta, considerando DelimitadorDoCampo
function FormatLineResult: string;
var
  i: Integer;
begin
  Result := '';
  for i := 0 to _ListFields.Count - 1 do
    Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
end;

function GetXmlNFSe(const aNumero: string): string;
begin
  Result := XmlSelect(Params.Values['XmlLote'],
    '//*[namespace-uri()="http://www.abrasf.org.br/ABRASF/arquivos/nfse.xsd" and local-name()="Nfse"]' +
    '/*[local-name()="InfNfse"]/*[local-name()="Numero" and text()="' + aNumero + '"]/../../..');
  Result := StringReplace(Result, #10, '|', [rfReplaceAll]); // CR
  Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
end;

// Função para Capturar a Ordem dos Campos de Falha
function CreateFieldsResponseFalha: TStringList;
begin
  Result := TStringList.Create;
  Result.Add('Status');
  Result.Add('Motivo');
end;

function CreateFieldsResponseProcessamento : TStringList;
begin
  Result := TStringList.Create;
  Result.Add('Status');
end;

begin
  Output := '';

  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSets;

  Progress('Adicionando valores aos campos.');
  _NFSE.First;
  _Motivo := GetMotivo;

  if Params.Values['SituacaoLote'] <> '' then  // Consulta de situação
  begin
    try
      case StrToIntDef(Params.Values['SituacaoLote'], 0) of
        2: _Status := 'EMPROCESSAMENTO';
        4: _Status := 'SUCESSO';
      else
        _Status := 'ERRO';
      end;

      if _Status = 'ERRO' then
        _ListFields := CreateFieldsResponseFalha
      else
        _ListFields := CreateFieldsResponseProcessamento;

      AddValueListFields('Status', _Status);
      AddValueListFields('Motivo', _Motivo);
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    finally
      _ListFields.Free;
    end;
  end
  else
  begin
    if _Motivo <> '' then
    begin
      try
        _ListFields := CreateFieldsResponseFalha;

        if (_DSFalha.FieldByName('MotivoCodigo').AsString = 'E180') then  // E180: lote em processamento (Natal).
        begin
          AddValueListFields('Status', 'EMPROCESSAMENTO');
          AddValueListFields('Motivo', '');
        end
        else
        begin
          AddValueListFields('Status', 'ERRO');
          AddValueListFields('Motivo', _Motivo);
        end;

        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      finally
        _ListFields.Free;
      end;
    end
    else
    begin
      while Not _NFSE.Eof Do
      begin
        _ListFields := CreateFieldsResponse;
        if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
          try
            FormatXsdDateTime(_NFSE.FieldByName('DataAutorizacao').AsString, _DataAutorizacao);

            AddValueListFields('Status', 'SUCESSO');
            AddValueListFields('Motivo', GetMotivo);
            AddValueListFields('Cnpj', _NFSE.FieldByName('cnpj').AsString);
            AddValueListFields('InscMunicipal', _NFSE.FieldByName('InscMunicipal').AsString);
            AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
            AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
            AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
            AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
            AddValueListFields('DataAutorizacao', _DataAutorizacao);
            AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
            AddValueListFields('Situacao', GetSituacaoNFSE);
            AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
            AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
            AddValueListFields('Xml', GetXmlNFSe(_NFSE.FieldByName('NumeroNFSe').AsString));
            AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);

            if (Params.Values['DelimitadorDaLinha'] = '') then
              Output := Output + FormatLineResult + #13#10
            else
              Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];

          finally
            _ListFields.Free;
          end;
        _NFSE.Next;
      end;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.
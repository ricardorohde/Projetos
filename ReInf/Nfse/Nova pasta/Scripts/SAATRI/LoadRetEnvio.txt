{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

  function EnvioSincrono: Boolean;
  Var
    _Value: string;
  begin
    Result := XmlSelectNodeValue(Input, '//*[local-name()="GerarNfseResposta"]', _Value) or
      (Pos('GerarNfseResposta', Input) > 0);
  end;

  function GetConfigSection: string;
  begin
    if EnvioSincrono then
      Result := 'RETORNO_ENVIOSINCRONO'
    else
      Result := 'RETORNO_ENVIAR';
  end;

Var
  _Xml: string;

{$I Utils.txt}

begin
  if Pos('<faultstring', Input) > 0 then
  begin
    Input := StringReplace(Input, #13#10, '', [rfReplaceAll]);
    Params.Add('faultstring=' + Input);
  end
  else
  begin
    Progress('Carregando configurações de XSDDataset.');

    Datasets.ConfigSection := GetConfigSection;

    if Trim(MappingXsdFileName) <> '' then
      Datasets.MappingFileName := MappingXsdFileName;

    Progress('Criando XSDDataset.');
    Datasets.CreateXSDDataset;

    _Xml := StringReplace(Input, '<!--CRLF-->', '', [rfReplaceAll]);

    if EnvioSincrono then
    begin
      _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName,
        '//*[local-name()="GerarNfseResposta"]');
      Params.Add('EnvioSincrono=true');
      _Xml := StringReplace(_Xml, #13#10, '<!--CRLF-->', [rfReplaceAll]);
      // Em alguns casos o XmlDeepNodeSearch pode indentar o XML, causando problemas no CSV
      _Xml := UnindentXml(_Xml);
      Params.Add('XmlLote=' + _Xml);
    end
    else
      _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName, '//*[local-name()="EnviarLoteRpsResposta"]');

    Datasets.LoadFromXMLContent(_Xml);
    Progress('XML carregado com sucesso.');
  end;
end.
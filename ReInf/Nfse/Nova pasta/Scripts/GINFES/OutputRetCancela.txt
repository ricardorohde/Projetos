{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _DSSucesso, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;


  function GetDataHora : string;
  begin
    result := Params.Values['DataHora'];
  end;

  function GetSucesso : string;
  begin
    result := Params.Values['Sucesso'];
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if GetSucesso = 'false' then
    begin
          result := Format3('%s-%s (%s)', Params.Values['Codigo'],
                                         Trim(Params.Values['Mensagem']),
                                         Trim(Params.Values['Correcao']));
    end;
  end;


  function GetStatus : string;
  begin
    if (GetSucesso = 'true') then
       result := 'SUCESSO'
    else
       result := 'ERRO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    result := TStringList.Create;
    result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  _ListFields := CreateFieldsResponse;
  if _ListFields <> nil then
  Try
    Progress('Adicionando valores aos campos.');
    AddValueListFields('Motivo',GetMotivo);
    AddValueListFields('Status', GetStatus);
    AddValueListFields('DataCancelamento',GetDataHora);
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;

end.

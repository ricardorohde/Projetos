{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _DSSucesso, _DSFalha, _DSAlerta : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Erro: String;

const
  COMANDO_MOTIVOS = '//*[local-name()="Erros"]/*[local-name()="Erro"]';

  procedure GetPonteirosDataSets;
  begin
    _DSSucesso := Datasets.GetDataSetByName('RetornoEnvioLoteRPS');
    _DSFalha := Datasets.GetDataSetByName('Erro');
    _DSAlerta := Datasets.GetDataSetByName('Alerta');

    if (_DSSucesso = nil) then
      RaiseException('DataSet RetornoEnvioLoteRPS não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet Erro não foi carregado corretamente.');
    if (_DSAlerta = nil) then
      RaiseException('DataSet Alerta não foi carregado corretamente.');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
  end;

  function GetMotivoErros(const aXML: string) : string;
  var
    i, _count: integer;
    _Val, _Cod, _Desc: string;
  begin
    if Params.Values['faultstring'] <> '' then
      Result := 'Falha na comunicação com WebService - ' + Params.Values['faultstring']
    else if (Result = '') then
    begin
      _count := XmlSelectCountNode(aXml, COMANDO_MOTIVOS);
      for i := 1 to _count do
      begin
        if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS +'['+ IntToStr(i) +']'+ '/*[local-name()="Codigo"]', _Cod) and
           XmlSelectNodeValue(aXml, COMANDO_MOTIVOS + '['+ IntToStr(i) +']'+ '/*[local-name()="Descricao"]', _Desc) then
        begin
          _Val := _Cod + '-' + _Desc;
          if Result = '' then
            Result := _Val
          else
            Result := Result + '-' + _Val;
        end;
      end;
    end;

    if Result = '' then
    begin
      _count := XmlSelectCountNode(aXml, COMANDO_MOTIVOS);
      for i := 1 to _count do
      begin
        if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS +'['+ IntToStr(i) +']', _Desc) then
        begin
          _Val := _Desc;
          if Result = '' then
            Result := _Val
          else
            Result := Result + '-' + _Val;
        end;
      end;
    end;

    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else
    if (_DSFalha <> nil) and (_DSFalha.FieldByName('MotivoCodigo').AsString <> '') then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format2('%s-%s', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                     Trim(_DSFalha.FieldByName('MotivoMensagem').AsString))
        else
          Result := Format3('%s: %s-%s', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                                 Trim(_DSFalha.FieldByName('MotivoMensagem').AsString));
        _DSFalha.Next;
      end;
    end
    else
    if (_DSAlerta <> nil) and (_DSAlerta.FieldByName('AlertaCodigo').AsString <> '') then
    begin
      _DSAlerta.First;
      while Not _DSAlerta.Eof do
      begin
          if (Result = '') then
            Result := Format2('%s-%s', _DSAlerta.FieldByName('AlertaCodigo').AsString,
                                       Trim(_DSAlerta.FieldByName('AlertaMensagem').AsString))
            else
              Result := Format3('%s: %s-%s', Result, _DSAlerta.FieldByName('AlertaCodigo').AsString,
                                                     Trim(_DSAlerta.FieldByName('AlertaMensagem').AsString));
        _DSAlerta.Next;
      end;
    end;
  end;

  function GetNumeroProtocolo : string;
  begin
    Result := _DSSucesso.FieldByName('NumeroProtocolo').AsString;
  end;

  function GetStatus : string;
  begin
    if (_DSFalha.FieldByName('MotivoCodigo').AsString <> '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','NumeroProtocolo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  _ListFields := CreateFieldsResponse;
  if Params.Values['Erro'] <> '' then
  begin
    _Erro := StringReplace(Params.Values['Erro'],#$D#$A,'',[rfReplaceAll,rfIgnoreCase]);
    _Erro := StringReplace(_Erro,#$A,'',[rfReplaceAll,rfIgnoreCase]);
    if _ListFields <> nil then
    Try
      Progress('Adicionando valores aos campos');
      AddValueListFields('Motivo',GetMotivoErros(_Erro));
      AddValueListFields('Status', 'ERRO');
      AddValueListFields('NumeroProtocolo','');
      Output := FormatLineResult;
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    Progress('Obtendo ponteiros dos DataSets.');
    GetPonteirosDataSets;
    if _ListFields <> nil then
    Try
      Progress('Adicionando valores aos campos');
      AddValueListFields('Motivo',GetMotivo);
      AddValueListFields('Status', GetStatus);
      AddValueListFields('NumeroProtocolo',GetNumeroProtocolo);
      Output := FormatLineResult;
    Finally
      _ListFields.Free;
    end;
  end;
  Progress('Valores adicionados com sucesso.');

end.

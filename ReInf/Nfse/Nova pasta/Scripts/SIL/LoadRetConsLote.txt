{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
    Params : TStringList;
}

{$I ..\Comuns\Utils.txt}

  function RemoveTagLogo(const aXml, aNomeTag: string): string;
  var
    _TagRemocao : string;
    _posInicialTag, _posFinalTag, _tamanhoTag: integer;
  begin
    _posInicialTag := Pos('<'+ aNomeTag +'>', aXml);
    if aNomeTag = 'TimbrePrefeituraLogo' then
      _posFinalTag := Pos('</'+ aNomeTag + '>', aXml) + 23
    else
      _posFinalTag := Pos('</'+ aNomeTag + '>', aXml) + 25;

    _tamanhoTag := _posFinalTag - _posInicialTag;
    _TagRemocao := Copy(aXml,_posInicialTag,_tamanhoTag);

    if ((_TagRemocao <> '') and (_posInicialTag > 0)) then
      Result := StringReplace(aXml, _TagRemocao, '', [rfReplaceAll])
    else
      Result := aXml;
  end;

Var
  _Xml,_SituacaoLote : string;
begin
  Progress('Carregando configurações do XSDDataset');

  Datasets.XsdFile := PathXsd + 'spd_consulta.xsd';
  Datasets.XsdElementName := 'tbnfd';
  Datasets.ConfigSection := 'RETORNO_CONSULTARLOTE';
  if Trim(MappingXsdFileName) <> '' then
    Datasets.MappingFileName := MappingXsdFileName;
  Progress('Criando XSDDataset.');
  Datasets.CreateXSDDataset;

  _Xml:= Input;

  // Às vezes alguns campos vêm com tags HTML escapadas, remover (Bug #2313).
  _Xml := StringReplace(_Xml, '&lt;b&gt;', '', [rfReplaceAll]);
  _Xml := StringReplace(_Xml, '&lt;/b&gt;', '', [rfReplaceAll]);
  _Xml := StringReplace(_Xml, '&lt;br&gt;', '', [rfReplaceAll]);
  _Xml := StringReplace(_Xml, '&lt;/br&gt;', '', [rfReplaceAll]);

  if Pos('&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;', _Xml) > 0 then
  begin
    // XML bruto: desescapar para evitar problemas
    _Xml:= StringReplace(_Xml, '&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;', '',  [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&apos;', '''', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&quot;', '"',  [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&gt;', '>', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&lt;', '<', [rfReplaceAll]);
    // Re-escapando &'s avulsos de forma segura
    _Xml:= StringReplace(_Xml, '&amp;amp;', '###eamp###', [rfReplaceAll]);
    // "<", ">" e ';' não são suportados no momento por problemas no converter
    _Xml:= StringReplace(_Xml, '&amp;lt;', '', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&amp;gt;', '', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '###eamp###', '&amp;', [rfReplaceAll]);
  end
  else
  begin
    // "<", ">" e ';' não são suportados no momento por problemas no converter
    _Xml:= StringReplace(_Xml, '&lt;', '', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&gt;', '', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&lt\delimiter', '', [rfReplaceAll]);  // eDoc
    _Xml:= StringReplace(_Xml, '&gt\delimiter', '', [rfReplaceAll]);  // eDoc
    // Re-escapando &'s avulsos de forma segura
    _Xml:= StringReplace(_Xml, '&amp;', '###eamp###', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '&', '&amp;', [rfReplaceAll]);
    _Xml:= StringReplace(_Xml, '###eamp###', '&amp;', [rfReplaceAll]);
  end;

  _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName, '//*[local-name()="tbnfd"]');
  _Xml := RemoveTagLogo(_Xml,'TimbrePrefeituraLogo');
  _Xml := RemoveTagLogo(_Xml,'TimbreContribuinteLogo');

  if Pos('<faultstring',input) > 0 then
    Params.Add('faultstring='+input)
  else If Pos('<return>Erro:', Input) > 0 then
    Params.Add('Erro='+input)
  else
  begin
    Datasets.LoadFromXMLContent(_Xml);
    Params.Add('XmlLote='+_Xml);
    Progress('XML carregado com sucesso');
  end;
end.

{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\Utils.txt}

Var
  _NFSE,_Util : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo,_Status : String;

  procedure GetPonteirosDataSets;
  begin
    _Util := Datasets.GetDataSetByName('tbnfd');
    _NFSE := Datasets.GetDataSetByName('nfdok');
    if (_NFSE = nil) then
      RaiseException('DataSet nfdok não foi carregado corretamente.');
    if (_Util = nil) then
      RaiseException('DataSet tbnfd não foi carregado corretamente.');
  end;

  function GetMotivo : string;
  var
    _Msg: String;
  begin
    if Params.Values['faultstring'] <> '' then
      Result := 'Falha na comunicação com WebService-' + Input
    else if Params.Values['Erro'] <> '' then
    begin
      xmlSelectNodeValue(Params.Values['Erro'],'//*[local-name()="return"]',_Msg);
      Result := '-' + _Msg;
    end
    else Result := '';
  end;

  function GetStatus : String;
  begin
    if Params.Values['faultstring'] = '' then
    begin
      if (_NFSE <> nil) then
      begin
        if (_NFSE.FieldByName('NumeroNFSe').AsString <> '') then
          Result := 'SUCESSO'
        else
          Result := 'ERRO';
      end
      else
        Result := 'ERRO';
    end;
  end;

  function GetSituacaoNFSE : string;
  begin
    if (GetMotivo <> '') or (Params.Values['faultstring'] <> '') then
      Result := 'ERRO'
    else if _NFSE.FieldByName('SituacaoNf').AsString = 'Normal' then
      Result := 'AUTORIZADA'
    else if _NFSE.FieldByName('SituacaoNf').AsString = 'Cancelada' then
      Result := 'CANCELADA';
  end;

  function GetXmlNFSe(const aNumero : string) : string;
  begin
    Result := XmlSelect(Params.Values['XmlLote'], '//*[local-name()="nfdok"]/*[local-name()="NewDataSet"]/*[local-name()="NOTA_FISCAL"]/*[local-name()="NumeroNota" and text()="'+aNumero+'"]/../../..');

    // Enters por Pipe
    Result := StringReplace(Result, #10, '', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '|', [rfReplaceAll]); // LF
    Result := StringReplace(Result, ';', '\delimiter', [rfReplaceAll]);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var _i : Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  //Função para separar o Cnpj e a Inscrição Municipal do prestador
  function ObterCnpj_InscMunicipal(const aFieldName: String): String;
  var
    _Lista: TStringList;
    _Aux: string;
  begin
    _Lista := TStringList.Create;
    Try
      _Lista.CommaText := _NFSE.FieldByName('Cpf_Cnpj_Im').AsString;
      If aFieldName = 'InscMunicipal' then
      begin
        Result := _Lista[2];
      end
      else if aFieldName =  'Cnpj' then
      begin
        _Aux := _Lista[4];
        _Aux := StringReplace(_Aux, '.', '',[rfReplaceAll]);
        _Aux := StringReplace(_Aux, '-', '',[rfReplaceAll]);
        _Aux := StringReplace(_Aux, '/', '',[rfReplaceAll]);

        Result := _Aux;
      end;
    Finally
      _Lista.Free;
    end;
  end;

begin
  Output := '';
  Progress('Obtendo ponteiros dos DataSets.');
  GetPonteirosDataSets;

  Progress('Adicionando valores aos campos');
  _NFSE.First;
  _Motivo := GetMotivo;
  _Status := GetStatus;

  if _Motivo <> '' then
  begin
    Try
     _ListFields := CreateFieldsResponseFalha;
     AddValueListFields('Status', 'ERRO');
     AddValueListFields('Motivo',_Motivo);
     Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    while (Not _NFSE.Eof) Do
    begin
      _ListFields := CreateFieldsResponse;

      if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
      begin
        Try
          AddValueListFields('Status', _Status);
          AddValueListFields('Motivo', _Motivo);
          AddValueListFields('Cnpj', ObterCnpj_InscMunicipal('Cnpj'));
          AddValueListFields('InscMunicipal', ObterCnpj_InscMunicipal('InscMunicipal'));

          // Não existe informações de RPS(RT) no xml de Retorno
          AddValueListFields('SerieRps','');
          AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
          AddValueListFields('Tipo','');

          AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
          AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
          AddValueListFields('DataAutorizacao', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
          AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
          AddValueListFields('Situacao', GetSituacaoNFSe);

          // Não existe informações de Cancelamento no xml de Retorno
          AddValueListFields('DataCancelamento', '');
          AddValueListFields('ChaveCancelamento', _NFSE.FieldByName('NumeroNFSe').AsString);

          AddValueListFields('Xml', GetXmlNFSe(_NFSE.FieldByName('NumeroNFSe').AsString));

          if (Params.Values['DelimitadorDaLinha'] = '') then
            Output := Output + FormatLineResult + #13#10
          else
            Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        Finally
          _ListFields.Free;
        end;
        _NFSE.Next;
      end;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.

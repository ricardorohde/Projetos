{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _ListFields : TStringList;
  _Motivo, _Status, _Xml: String;

  // 0 = Erro
  // 1 = Sucesso
  function GetResultado : String;
  var
    _XML, _Resultado: string;
  begin
    _XML := Params.Values['XmlNFSe'];
    if _XML = '' then
      Result := '0'
    else
    begin
      if xmlSelectNodeValue(_XML, '//*[local-name()="CancelarNotaResponse"]//*[local-name()="RetornoNota"]//*[local-name()="Resultado"]', _Resultado) then
        Result := _Resultado
      else
        Result := '0';
    end;
  end;

  // Obtém o código do Erro
  function GetCodigoErro(const aXML: string) : string;
  var
   _Cod, _Comando : String;
  begin
    _Comando := '/*[local-name()="CancelarNotaResponse"]/*[local-name()="Mensagens"]/*[local-name()="item"]/*[local-name()="id"]';
    if xmlSelectNodeValue(aXml, _Comando, _Cod) then
      Result := _Cod
    else
      Result := '';
  end;

  // Obtém a mensagem do Erro
  function GetMensagemErro(const aXML: string) : string;
  var
    _Mensagem, _Comando : String;
  begin
    _Comando := '/*[local-name()="CancelarNotaResponse"]/*[local-name()="Mensagens"]/*[local-name()="item"]/*[local-name()="DescricaoErro"]';
    if xmlSelectNodeValue(aXml, _Comando, _Mensagem) then
      Result := _Mensagem
    else
      Result := '';
  end;

  function GetMotivo(const aXML: string) : string;
  begin
    if GetResultado = '1' then
      Result := ''
    else
    begin
      if Params.Values['faultstring'] <> '' then
      begin
        Result := 'Falha na comunicação com WebService-' + Input;
      end else
      begin
        Result := GetCodigoErro(aXML) + ' - ' + GetMensagemErro(aXML);
      end;
    end;
  end;

  function GetStatus(const aMotivo: string) : string;
  begin
    if (GetResultado = '0') or (Params.Values['faultstring'] <> '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);

    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  _Xml := Params.Values['XmlNFSe'];
  _Status := GetStatus(_Motivo);

  if _Motivo <> 'ERRO' then
    _Motivo := GetMotivo(_Xml)
  else
    _Motivo := '';

  Progress('Adicionando valores aos campos.');
  _ListFields := CreateFieldsResponse;

  if _ListFields <> nil then
    Try
      AddValueListFields('Motivo', _Motivo);
      AddValueListFields('Status', _Status);
      AddValueListFields('DataCancelamento', '');
      Output := FormatLineResult;
    Finally
      _ListFields.Free;

      Progress('Valores adicionados com sucesso.');
    end;
end.

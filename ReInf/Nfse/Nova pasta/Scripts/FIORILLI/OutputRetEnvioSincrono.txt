{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}

Var
  _NFSE, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo, _Status, _NumeroNFSe, _DataAutorizacao : String;

  procedure GetPonteirosDataSets;
  begin
    _NFSE := Datasets.GetDataSetByName('CompNfse');
    _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');

    if (_NFSE = nil) then
      RaiseException('DataSet EnviarLoteRpsResposta não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, '&amp;', '@@@@@',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result,'@@@@@','&amp;',[rfReplaceAll]);
  end;

  // Obtém o código do Erro
  function GetCodigo(const aXML: string) : string;
  var
   _Cod, _Comando : String;
  begin
    _Comando := '//*[local-name()="ListaMensagemRetorno"]/*[local-name()="MensagemRetorno"]/*[local-name()="Codigo"]';
    if xmlSelectNodeValue(aXml, _Comando, _Cod) then
      Result := _Cod
    else
      Result := '';
  end;

  // Obtém a mensagem do Erro
  function GetMensagem(const aXML: string) : string;
  var
      _Mensagem, _Comando : String;
  begin
    _Comando := '//*[local-name()="ListaMensagemRetorno"]/*[local-name()="MensagemRetorno"]/*[local-name()="Mensagem"]';
    if xmlSelectNodeValue(aXml, _Comando, _Mensagem) then
      Result := _Mensagem
    else
      Result := '';
  end;

  // Obtém a mensagem do Erro
  function GetCorrecao(const aXML: string) : string;
  var
      _Correcao, _Comando : String;
  begin
    _Comando := '//*[local-name()="ListaMensagemRetorno"]/*[local-name()="MensagemRetorno"]/*[local-name()="Correcao"]';
    if xmlSelectNodeValue(aXml, _Comando, _Correcao) then
      Result := _Correcao
    else
      Result := '';
  end;

  function GetMotivo : string;
  var
    _Xml : String;
  begin
    _Xml := Params.Values['XmlLote'];

    if (GetCodigo(_Xml) <> '') then
      Result := Format3('%s-%s (%s)', GetCodigo(_XML), GetMensagem(_Xml), GetCorrecao(_Xml));

    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;

      if Trim(_DSFalha.FieldByName('MotivoCodigo').AsString) <> '' then
      begin
        while Not _DSFalha.Eof do
        begin
          if (Result = '') then
            Result := Format2('%s-%s', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                     Trim(_DSFalha.FieldByName('MotivoMensagem').AsString))
          else
            Result := Format3('%s: %s-%s', result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                          Trim(_DSFalha.FieldByName('MotivoMensagem').AsString));
          _DSFalha.Next;
        end;
      end;
    end;
  end;

  function GetStatus : string;
  begin
    if (Params.Values['SituacaoLote'] = '2') then
      Result := 'EMPROCESSAMENTO'
    else
    begin
      if (Params.Values['faultstring'] = '') and (GetMotivo = '') then
        Result := 'SUCESSO'
      else
        Result := 'ERRO';
    end;
  end;

  function GetSituacaoNFSE : string;
  begin
    if (_NFSE.FieldByName('DataCancelamento').AsString = '') then
    begin
      if (_DSFalha.FieldByName('MotivoMensagem').AsString <> '') or (Params.Values['faultstring'] <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end
    else
      Result := 'CANCELADA';
  end;

  function GetXmlNFSe(const aNumero: string): string;
  var
  _Xml, _Comando : String;
  begin
    _Comando := '//*[local-name()="EnviarLoteRpsSincronoResposta"]/*[local-name()="ListaNfse"]/*[local-name()="CompNfse"]/*[local-name()="Nfse"]/*[local-name()="InfNfse"]/*[local-name()="Numero" and text()="'+aNumero+'"]/../../..';

    _Xml := XmlSelect(Params.Values['XmlLote'], _Comando);

    Result := RemoveCaracteresInvalidosResposta(_Xml);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);

    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
          'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
          'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
          ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de Resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSets;

  _Motivo := GetMotivo;
  _Status := GetStatus;

  if (_Motivo <> '') or (_Status = 'ERRO') then
  begin
    Try
      _Motivo := StringReplace(_Motivo, ';', '', [rfReplaceAll]);
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',_Motivo);
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    _NFSE.First;
    while Not _NFSE.Eof Do
    begin
      _ListFields := CreateFieldsResponse;
      if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
      Try
        _NumeroNFSe := _NFSE.FieldByName('NumeroNFSe').AsString;

        Progress('Adicionando valores aos campos.');

        if _NFSE.FieldByName('CnpjPrestador').AsString <> '' then
          AddValueListFields('Cnpj', _NFSE.FieldByName('CnpjPrestador').AsString)
        else
          AddValueListFields('Cnpj', _NFSE.FieldByName('CpfPrestador').AsString);

        FormatXsdDateTime(_NFSE.FieldByName('DataAutorizacao').AsString, _DataAutorizacao);

        AddValueListFields('Status', _Status);
        AddValueListFields('Motivo', _Motivo);
        AddValueListFields('InscMunicipal', _NFSE.FieldByName('InscMunicipal').AsString);
        AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
        AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
        AddValueListFields('NumeroNFSe', _NumeroNFSe);
        AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
        AddValueListFields('DataAutorizacao', _DataAutorizacao);
        AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
        AddValueListFields('Situacao', GetSituacaoNFSe);
        AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
        AddValueListFields('ChaveCancelamento', _NumeroNFSe);
        AddValueListFields('Xml', GetXmlNFSe(_NumeroNFSe));
        AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);

        if (Params.Values['DelimitadorDaLinha'] = '') then
          Output := Output + FormatLineResult + #13#10
        else
          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      Finally
        _ListFields.Free;
      end;
      _NFSE.Next;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.
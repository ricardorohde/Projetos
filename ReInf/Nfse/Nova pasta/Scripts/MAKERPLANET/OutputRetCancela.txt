{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}
{$I ..\MAKERPLANET\Utils.TXT}
Var
  _ListFields : TStringList;
  _Status, _Motivo, _Result, _Xml: string;

  function GetMotivo(const aResult:string): string;
  Var
    _Cod, _FaultString, _Aux: string;
  begin
    Result := '';
    _FaultString := Params.Values['faultstring'];
    if _FaultString <> '' then
    begin
      if xmlSelectNodeValue(_FaultString, '//*[local-name()="faultstring"]', _Aux) then
        Result := 'Falha na comunicação com WebService-' + _Aux
      else
        Result := 'Falha na comunicação com WebService-' + _FaultString;
    end
    else
    begin
    _Cod := GetCodigo(aResult);
      case StrToIntDef(_Cod, -1) of
        1: Result := '';
        2: Result := 'Problemas no arquivo enviado, tamanho incompatível';
        3: Result := 'Problemas no arquivo enviado, nota não encontrada para cancelamento';
        4: Result := 'Nota '+ GetNumeroNFSe(aResult)+ ' já cancelada';
        5: Result := 'Problemas no arquivo enviado, usuário e senha inválido';
        6: Result := 'Problemas no arquivo enviado, campo Cnpj/Cpf emitente com problemas';
      else
        Result := 'Erro desconhecido';
      end;
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

   //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponseCancelamento : TStringList;
  var
    _i: Integer;
  begin
    result := TStringList.Create;
    result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);

    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Progress('Obtendo os campos de resposta.');
  _Xml := Params.Values['XML'];
  _Result := Params.Values['Resultado'];
  _Status := GetStatus(_Result);

  Progress('Adicionando valores aos campos.');
  _ListFields := CreateFieldsResponseCancelamento;
  if _ListFields <> nil then
  Try
    AddValueListFields('Motivo', GetMotivo(_Result));
    AddValueListFields('Status', _Status);
    AddValueListFields('DataCancelamento', '');
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;
end.

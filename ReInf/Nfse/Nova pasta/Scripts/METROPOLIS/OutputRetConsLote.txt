{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _NFSE, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo, _Status: String;

  procedure GetPonteirosDataSets;
  begin
    if pos('ConsultarSituacaoLoteRpsResposta', Input) > 0 then
    begin
      _NFSE := Datasets.GetDataSetByName('ConsultarSituacaoLoteRpsResposta');
      _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
    end
    else
    begin
    _NFSE := Datasets.GetDataSetByName('CompNfse');
    _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');

    if (_NFSE = nil) then
      RaiseException('DataSet CompNfse não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
    end;
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_NFSE <> nil) and (_NFSE.RecordCount <= 0) and (_DSFalha.RecordCount <= 0) then
    begin
      Result := 'XML de retorno vazio';  // Não podemos colocar o XML pois pode bagunçar o retorno tipado
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                         Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                         Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                             Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                             Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
  end;

  function GetStatus : string;
  var
    _SituacaoLote: string;
  begin
    _SituacaoLote := Params.Values['SituacaoLote'];
    if (_SituacaoLote = '') then
    begin
      //Consulta de Lote
      if (Params.Values['SituacaoLote'] = '2') or (_DSFalha.FieldByName('MotivoCodigo').AsString = 'E179') then
      begin
        Result := 'EMPROCESSAMENTO';
      end
      else
      begin
        if (_Motivo <> '') or (Params.Values['faultstring'] <> '') or (Params.Values['SituacaoLote'] = '3') then
          Result := 'ERRO'
        else
          Result := 'SUCESSO';
      end;
    end
    else
    begin
      // Consulta de situação de lote
      case StrToIntDef(_SituacaoLote, 0) of
        2: Result := 'EMPROCESSAMENTO';
        4: Result := 'SUCESSO'
      else
        Result := 'ERRO';
      end;
    end;
  end;


  function GetSituacaoNFSE : string;
  begin
    if (_NFSE.FieldByName('CodigoCancelamento').AsString = '') then
    begin
      if (_DSFalha.FieldByName('MotivoMensagem').AsString <> '') or (Params.Values['faultstring'] <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end
    else
      Result := 'CANCELADA';
  end;

  function GetChaveCancelamento : string;
  begin
    // No caso de THEMA é o mesmo numero da Nota conf. HelpExtra do componente
    Result := _NFSE.FieldByName('NumeroNFSe').AsString;
  end;

  function GetXmlNFSe(const aNumero : string) : string;
  begin
    Result := XmlSelect(Params.Values['XmlLote'], '//*[namespace-uri()="http://www.abrasf.org.br/ABRASF/arquivos/nfse.xsd" and local-name()="Nfse"]'+
      '/*[local-name()="InfNfse"]/*[local-name()="Numero" and text()="'+aNumero+'"]/../../..');

    // Eliminar os Enters e os tabs
    Result := StringReplace(Result, #10, '', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
    Result := StringReplace(Result, #9, '', [rfReplaceAll]); // Tab
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml',
        'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

   //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  function CreateFieldsResponseProcessamento : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Output := '';

    if Params.Values['SituacaoLote'] = '' then
    begin
      Progress('Obtendo ponteiros dos DataSets.');
      GetPonteirosDataSets;

      Progress('Adicionando valores aos campos');
      _NFSE.First;
      _Motivo := GetMotivo;
      _Status := GetStatus;

      if _Status = 'EMPROCESSAMENTO' then
      begin
        _ListFields := CreateFieldsResponseProcessamento;
        try
          AddValueListFields('Status', _Status);

          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        finally
          _ListFields.Free;
        end;
      end
      else if _Motivo <> '' then
      begin
        _ListFields := CreateFieldsResponseFalha;
        Try
          AddValueListFields('Status', 'ERRO');
          AddValueListFields('Motivo', _Motivo);

          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        Finally
          _ListFields.Free;
        end;
      end
      else
      begin
        while Not _NFSE.Eof Do
        begin
          _ListFields := CreateFieldsResponse;
          Try
            if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
            begin
              AddValueListFields('Status', 'SUCESSO');
              AddValueListFields('Motivo', GetMotivo);
              AddValueListFields('Cnpj', _NFSE.FieldByName('cnpj').AsString);
              AddValueListFields('InscMunicipal', _NFSE.FieldByName('InscMunicipal').AsString);
              AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
              AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
              AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
              AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
              AddValueListFields('DataAutorizacao', _NFSE.FieldByName('DataAutorizacao').AsString);
              AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
              AddValueListFields('Situacao', GetSituacaoNFSe);
              AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
              AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
              AddValueListFields('Xml', GetXmlNFSe(_NFSE.FieldByName('NumeroNFSe').AsString));
              AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);
              if (Params.Values['DelimitadorDaLinha'] = '') then
                Output := Output + FormatLineResult + #13#10
              else
                Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
            end;
          Finally
            _ListFields.Free;
          end;
          _NFSE.Next;
        end;
      end;
    end
    else
    begin
      // Consulta de situação de lote
      Progress('Adicionando valores aos campos.');
      _Status := GetStatus;

      _ListFields := TStringList.Create;
      try
        if _Status = 'EMPROCESSAMENTO' then
        begin
          _ListFields.Add('Status');
          AddValueListFields('Status', _Status);
          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        end
        else if _Status = 'ERRO' then
        begin
          _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
          _ListFields.Add('Status');
          _ListFields.Add('Motivo');
          AddValueListFields('Status', 'ERRO');
          AddValueListFields('Motivo', GetMotivo);
          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        end
        else
        begin
          _ListFields := CreateFieldsResponse;

          AddValueListFields('Status', 'SUCESSO');
          AddValueListFields('Motivo', '');
          AddValueListFields('Cnpj', '');
          AddValueListFields('InscMunicipal', '');
          AddValueListFields('SerieRps', '');
          AddValueListFields('NumeroRps', '');
          AddValueListFields('NumeroNFSe', '');
          AddValueListFields('DataEmissaoNFSe', '');
          AddValueListFields('DataAutorizacao', '');
          AddValueListFields('CodVerificacao', '');
          AddValueListFields('Situacao', '');
          AddValueListFields('DataCancelamento', '');
          AddValueListFields('ChaveCancelamento', '');
          AddValueListFields('Xml', '');
          AddValueListFields('Tipo', '');

          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        end;
      finally
        _ListFields.Free;
      end;
    end;

  Progress('Valores adicionados com sucesso.');
end.

{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}
{$I ..\Comuns\Utils.txt}

Var
  _Retorno, _DSCodRetorno : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo, _Status, _DataAutorizacao : String;

  procedure GetPonteirosDataSets;
  begin
   _Retorno := Datasets.GetDataSetByName('retorno');
   _DSCodRetorno := Datasets.GetDataSetByName('codigo');

   if (_Retorno = nil) then
     RaiseException('DataSet CompNfse não foi carregado corretamente.');
   if (_DSCodRetorno = nil) then
     RaiseException('DataSet codigo não foi carregado corretamente.');
  end;

  function GetMotivo : string;
  var
    _Mensagem: string;
  begin
    if Params.Values['faultstring'] <> '' then
      Result := 'Falha na comunicação com WebService-' + Input
    else
    begin
      _Mensagem := '';

      _DSCodRetorno.First;
      while Not _DSCodRetorno.Eof do
      begin
        if (_Mensagem = '') then
          _Mensagem := _DSCodRetorno.FieldByName('codigo').AsString
        else
          _Mensagem := _Mensagem + ' ' + _DSCodRetorno.FieldByName('codigo').AsString;
        _DSCodRetorno.Next;
      end;

      if (Pos('00001 - Sucesso', _Mensagem) > 0) then
        Result := ''
      else
        Result := _Mensagem;
    end;
  end;

  function GetStatus : String;
  begin
    if (Params.Values['faultstring'] = '') and (GetMotivo = '') then
    begin
      if (Params.Values['SituacaoLote'] = '2') then
        result := 'EMPROCESSAMENTO'
      else if (Params.Values['SituacaoLote'] = '3') then
        result := 'ERRO'
      else
        result := 'SUCESSO';
    end
    else
      result := 'ERRO';
  end;

  function GetSituacaoNFSE : string;
  begin
    if (_Retorno.FieldByName('situacao_codigo_nfse').AsString = '2') or
       (_Retorno.FieldByName('situacao_descricao_nfse').AsString = 'CANCELADA') or
       (Pos('CANCELADA&lt;font&gt;&lt;/situacao', Input) > 0) then
      Result := 'CANCELADA'
    else
    begin
      if (GetMotivo <> '') or (Params.Values['faultstring'] <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end;
  end;


  function GetChaveCancelamento : string;
  begin
    Result := _Retorno.FieldByName('numero_nfse').AsString;
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, #10, '', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
  end;

  function GetXmlNFSe: string;
  var
    _Xml: String;
  begin
    Result := Input;
    Result := StringReplace(Result, ';', '<!--CHR59-->', [rfReplaceAll]);
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var _i : Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  function CreateFieldsResponseProcessamento : TStringList;
  begin
    result := TStringList.Create;
    result.Add('Status');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Output := '';
  Progress('Obtendo ponteiros dos DataSets.');

  GetPonteirosDataSets;
  Progress('Adicionando valores aos campos');
  _Retorno.First;
  _Motivo := GetMotivo;
  _Status := GetStatus;

  if _Status = 'EMPROCESSAMENTO' then
  begin
    try
    _ListFields := CreateFieldsResponseProcessamento;
    AddValueListFields('Status', _Status);

    Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
  finally
    _ListFields.Free;
  end;
  end
  else if (_Motivo <> '') or (_Status = 'ERRO') then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',_Motivo);
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    while (Not _Retorno.Eof) {or (Not _DSCodRetorno.Eof)} Do
    begin
      _ListFields := CreateFieldsResponse;

      if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
      begin
        Try
          FormatXsdDateTime(_Retorno.FieldByName('data_nfse').AsString, _DataAutorizacao);
          AddValueListFields('Status', _Status);
          AddValueListFields('Motivo', _Motivo);
          AddValueListFields('Cnpj', '');
          AddValueListFields('InscMunicipal', '');
          AddValueListFields('SerieRps', '');
          AddValueListFields('NumeroRps', '');
          AddValueListFields('NumeroNFSe', _Retorno.FieldByName('numero_nfse').AsString);
          AddValueListFields('DataEmissaoNFSe', _DataAutorizacao);
          AddValueListFields('DataAutorizacao', _DataAutorizacao);
          AddValueListFields('CodVerificacao', _Retorno.FieldByName('cod_verificador_autenticidade').AsString);
          AddValueListFields('Situacao', GetSituacaoNFSe);
          AddValueListFields('DataCancelamento', '');
          AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
          AddValueListFields('Xml', GetXmlNFSe);
          AddValueListFields('Tipo', '');

          if (Params.Values['DelimitadorDaLinha'] = '') then
            Output := Output + FormatLineResult + #13#10
          else
            Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
        Finally
          _ListFields.Free;
        end;
        _Retorno.Next;
      end;
    end;
  end;

  Progress('Valores adicionados com sucesso.');
end.
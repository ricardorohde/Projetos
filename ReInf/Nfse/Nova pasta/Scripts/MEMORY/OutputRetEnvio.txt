{
  Variáveis externas disponíveis:
    MappingXsdFileName: string;
    Input: string;
}
{$I Utils.txt}
Var
  _ListFields : TStringList;
  _Status, _Motivo, _Xml: string;
  _count, i: integer;

  function GetStatus : string;
  var
    _status: string;
  begin
    _status := GetValueTag('status', Params.Values['XML']);
    if (not SameText(UpperCase(_status), 'TRUE')) or (Params.Values['faultstring'] <> '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  function GetXmlNFSe(const aXml : string) : string;
  begin
    Result := XmlSelect(aXml, '//*[local-name()="nfse"]')
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','NumeroProtocolo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult(aListFieldsResult) + #13#10
    else
      Result := FormatLineResult(aListFieldsResult) + Params.Values['DelimitadorDaLinha'];
  end;

begin
  _Status := GetStatus;
  _Motivo := GetMotivo(Params.Values['XML']);

  if _Status = 'SUCESSO' then
  begin
    _ListFields := CreateFieldsResponse;
    if _ListFields <> nil then
    begin
      try
        Progress('Adicionando valores aos campos.');
        AddValueListFields('Status', 'SUCESSO', _ListFields);
        AddValueListFields('Motivo', '', _ListFields);
        AddValueListFields('NumeroProtocolo', GetValueTag('protocolo', Params.Values['XML']), _ListFields);
        Output := GetResult(_ListFields);
      finally
        _ListFields.Free;
      end;
    end;
  end
  else
  begin
    _ListFields := CreateFieldsResponseFalha;
    if _ListFields <> nil then
    begin
      try
        AddValueListFields('Status', 'ERRO', _ListFields);
        AddValueListFields('Motivo', _Motivo, _ListFields);
        Output := FormatLineResult(_ListFields);
      finally
        _ListFields.Free;
      end;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.
{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\InserirQuebrasDeLinha.txt}

Var
  _NFSE, _DSFalha, _DSCon, _DSAlerta : TSpdXSDClientDataSet;
  _ListFields : TStringList;

  procedure GetPonteirosDataSets;
  begin
    _NFSE     := Datasets.GetDataSetByName('RetornoConsultaNFSeRPS');
    _DSCon    := Datasets.GetDataSetByName('Nota');
    _DSFalha  := Datasets.GetDataSetByName('Erro');
    _DSAlerta := Datasets.GetDataSetByName('Alerta');

    if (_NFSE = nil) then
      RaiseException('DataSet CompNfse não foi carregado corretamente.');
    if (_DSCon = nil) then
      RaiseException('DataSet Nota não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet Falha não foi carregado corretamente.');
    if (_DSAlerta = nil) then
      RaiseException('DataSet Alerta não foi carregado corretamente.');
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else
    if (_DSFalha <> nil) and (_DSFalha.FieldByName('MotivoCodigo').AsString <> '') then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format2('%s-%s', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                     Trim(_DSFalha.FieldByName('MotivoMensagem').AsString))
        else
          Result := Format3('%s: %s-%s', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                                 Trim(_DSFalha.FieldByName('MotivoMensagem').AsString));
        _DSFalha.Next;
      end;
    end
    else
    if (_DSAlerta <> nil) and (_DSAlerta.FieldByName('AlertaCodigo').AsString <> '') then
    begin
      _DSAlerta.First;
      while Not _DSAlerta.Eof do
      begin
        if (Result = '') then
            Result := Format2('%s-%s', _DSAlerta.FieldByName('AlertaCodigo').AsString,
                                       Trim(_DSAlerta.FieldByName('AlertaMensagem').AsString))
        else
          Result := Format3('%s: %s-%s', Result, _DSAlerta.FieldByName('AlertaCodigo').AsString,
                                                 Trim(_DSAlerta.FieldByName('AlertaMensagem').AsString));
        _DSAlerta.Next;
      end;
    end;
  end;


  function GetChaveCancelamento : string;
  begin
    // No caso de DSF é o mesmo numero da Nota.
    Result := _DSCon.FieldByName('NumeroNFSe').AsString
  end;

  function GetSituacaoNFSE : string;
  begin
    if (_DSCon.FieldByName('MotivoCancelamento').AsString = '') then
      Result := 'AUTORIZADA'
    else
      Result := 'CANCELADA';
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, '&amp;lt;br /&amp;gt;','@@@',[rfReplaceAll]);
    Result := StringReplace(Result, '&amp;','%%%%%',[rfReplaceAll]);

    Result := StringReplace(Result, ';', '\delimiter', [rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);

    Result := StringReplace(Result, '@@@', STR_LINE_BREAK_DSF, [rfReplaceAll]);
    Result := StringReplace(Result, '%%%%%','&amp;',[rfReplaceAll]);
  end;

  function GetXmlNFSe : string;
  var
   _Xml : String;
  begin
    _Xml := Params.Values['XmlNFSe'];
    Result := ExtractXMLIndent(_Xml);
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function XmlSemDados: String;
  var
    _XMl: String;
  begin
    if xmlSelectNodeValue(Params.Values['XmlNFSe'],'//*[local-name()="NotasConsultadas"]',_Xml) then
      Result := _Xml
    else
      Result := '';
  end;

begin
  Progress('Obtendo ponteiros dos DataSets.');
  GetPonteirosDataSets;
  if (GetMotivo <> '') then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',GetMotivo);
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    _ListFields := CreateFieldsResponse;
    if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
    Try
      Progress('Adicionando valores aos campos');
      if XmlSemDados <> '' then
      begin
        AddValueListFields('Status', 'SUCESSO');
        AddValueListFields('Motivo', GetMotivo);
        AddValueListFields('Cnpj', _NFSE.FieldByName('cnpj').AsString);
        AddValueListFields('InscMunicipal', _DSCon.FieldByName('InscMunicipal').AsString);
        AddValueListFields('SerieRps', _DSCon.FieldByName('SerieRps').AsString);
        AddValueListFields('NumeroRps', _DSCon.FieldByName('NumeroRps').AsString);
        AddValueListFields('NumeroNFSe', _DSCon.FieldByName('NumeroNFSe').AsString);
        AddValueListFields('DataEmissaoNFSe', _DSCon.FieldByName('DataEmissaoNFSe').AsString);
        AddValueListFields('DataAutorizacao', _DSCon.FieldByName('DataAutorizacao').AsString);
        AddValueListFields('CodVerificacao', _DSCon.FieldByName('CodVerificacao').AsString);
        AddValueListFields('Situacao', GetSituacaoNFSe);
        AddValueListFields('DataCancelamento', '');
        AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
        AddValueListFields('Xml', GetXmlNFSe);
        AddValueListFields('Tipo', _DSCon.FieldByName('Tipo').AsString);
      end
      else
      begin
        AddValueListFields('Status', 'ERRO');
        AddValueListFields('Motivo', '');
        AddValueListFields('Cnpj', '');
        AddValueListFields('InscMunicipal', '');
        AddValueListFields('SerieRps', '');
        AddValueListFields('NumeroRps', '');
        AddValueListFields('NumeroNFSe', '');
        AddValueListFields('DataEmissaoNFSe', '');
        AddValueListFields('DataAutorizacao', '');
        AddValueListFields('CodVerificacao', '');
        AddValueListFields('Situacao', '');
        AddValueListFields('DataCancelamento', '');
        AddValueListFields('ChaveCancelamento', '');
        AddValueListFields('Xml', '');
        AddValueListFields('Tipo', '');
      end;
      Output := FormatLineResult;
    Finally
      _ListFields.Free;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.

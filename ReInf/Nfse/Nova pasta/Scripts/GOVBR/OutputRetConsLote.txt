{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}
{$I ..\Comuns\Utils.txt}
{$I ..\Comuns\InserirQuebrasDeLinha.txt}

Var
  _NFSE, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo, _Status, _DataAutorizacao : String;

  procedure GetPonteirosDataSets;
  begin
    _NFSE := Datasets.GetDataSetByName('CompNfse');
    _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
    if (_NFSE = nil) then
      RaiseException('DataSet CompNfse não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                         Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                         Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                             Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                             Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
  end;

  function GetSituacaoNFSE : string;
  begin
    if (_NFSE.FieldByName('DataCancelamento').AsString = '') then
    begin
      if (_DSFalha.FieldByName('MotivoMensagem').AsString <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end
    else
      Result := 'CANCELADA';
  end;

  function GetChaveCancelamento : string;
  begin
    Result := _NFSE.FieldByName('NumeroNFSe').AsString;
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue,'&amp;#xD;','',[rfReplaceAll]);
    Result := StringReplace(Result, '&amp;','&',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
  end;

  function GetXmlNFSe(const aNumero : string) : string;
  begin

    Result := XmlSelect(Params.Values['XmlLote'],
      '//*[local-name()="Nfse"]/*[local-name()="InfNfse"]'+
      '/*[local-name()="Numero" and text()="'+aNumero+'"]/../..');
    Result := RemoveCaracteresInvalidosResposta(Result);
    Result := StringReplace(Result, STR_LINE_BREAK_GOVBR,'|',[rfReplaceAll]);
  end;

  function GetStatus : string;
  var
    _SituacaoLote: string;
  begin
    _SituacaoLote := Params.Values['SituacaoLote'];
    if (_SituacaoLote = '') then
    begin
      // Consulta de lote
      if (_Motivo <> '') or (Params.Values['faultstring'] <> '') then
        result := 'ERRO'
      else
        if _NFSE.recordcount > 0 then
          result := 'SUCESSO'
        else
          result := 'EMPROCESSAMENTO';
    end
    else
    begin
      // Consulta de situação de lote
      case StrToIntDef(_SituacaoLote, 0) of
        2: Result := 'EMPROCESSAMENTO';
        4: Result := 'SUCESSO';
      else
        Result := 'ERRO';
      end;
    end;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  procedure CreateFieldsResponse(aListaCampos: TStringList);
  var
    _i: Integer;
  begin
    aListaCampos.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to aListaCampos.Count - 1 do
    begin
      if not AnsiMatchText(Trim(aListaCampos[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + aListaCampos[_i] + '" não suportado')
      else
        aListaCampos[_i] := Trim(aListaCampos[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Output := '';

  _ListFields := TStringList.Create;
  try
    if Params.Values['SituacaoLote'] = '' then
    begin
      // Consulta de Lote
      Progress('Obtendo ponteiros dos datasets.');
      GetPonteirosDataSets;

      Progress('Adicionando valores aos campos.');
      _NFSE.First;
      _Motivo := GetMotivo;
      _Status := GetStatus;

      if _Status = 'EMPROCESSAMENTO' then
      begin
        _ListFields.Add('Status');
        AddValueListFields('Status', _Status);
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end
      else if _Status = 'ERRO' then
      begin
        _ListFields.Add('Status');
        _ListFields.Add('Motivo');
        AddValueListFields('Status', 'ERRO');
        AddValueListFields('Motivo',_Motivo);
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end
      else
      begin
        while Not _NFSE.Eof Do
        begin
          CreateFieldsResponse(_ListFields);
          if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
            FormatXsdDateTime(_NFSE.FieldByName('DataAutorizacao').AsString, _DataAutorizacao);

          AddValueListFields('Status', 'SUCESSO');
          AddValueListFields('Motivo', GetMotivo);
          AddValueListFields('Cnpj', _NFSE.FieldByName('cnpj').AsString);
          AddValueListFields('InscMunicipal', _NFSE.FieldByName('InscMunicipal').AsString);
          AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
          AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
          AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
          AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
          AddValueListFields('DataAutorizacao', _DataAutorizacao);
          AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
          AddValueListFields('Situacao', GetSituacaoNFSe);
          AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
          AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
          AddValueListFields('Xml', GetXmlNFSe(_NFSE.FieldByName('NumeroNFSe').AsString));
          AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);

          if (Params.Values['DelimitadorDaLinha'] = '') then
            Output := Output + FormatLineResult + #13#10
          else
            Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];

          _NFSE.Next;
        end;
      end;
    end
    else
    begin
      // Consulta de situação de lote
      Progress('Adicionando valores aos campos.');
      _Status := GetStatus;

      if _Status = 'EMPROCESSAMENTO' then
      begin
        _ListFields.Add('Status');
        AddValueListFields('Status', _Status);
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end
      else if _Status = 'ERRO' then
      begin
        _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
        _ListFields.Add('Status');
        _ListFields.Add('Motivo');
        AddValueListFields('Status', 'ERRO');
        AddValueListFields('Motivo', GetMotivo);
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end
      else
      begin
        CreateFieldsResponse(_ListFields);

        AddValueListFields('Status', 'SUCESSO');
        AddValueListFields('Motivo', '');
        AddValueListFields('Cnpj', '');
        AddValueListFields('InscMunicipal', '');
        AddValueListFields('SerieRps', '');
        AddValueListFields('NumeroRps', '');
        AddValueListFields('NumeroNFSe', '');
        AddValueListFields('DataEmissaoNFSe', '');
        AddValueListFields('DataAutorizacao', '');
        AddValueListFields('CodVerificacao', '');
        AddValueListFields('Situacao', '');
        AddValueListFields('DataCancelamento', '');
        AddValueListFields('ChaveCancelamento', '');
        AddValueListFields('Xml', '');
        AddValueListFields('Tipo', '');

        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end;
    end;
  finally
    _ListFields.Free;
  end;

  Progress('Valores adicionados com sucesso.');
end.

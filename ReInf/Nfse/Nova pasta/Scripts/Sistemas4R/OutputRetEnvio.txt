{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _DSSucesso, _DSFalha, _DSFalhaLote, _DSFalhaDefault : TSpdXSDClientDataSet;
  _ListFields, _ListDsNamesFalha : TStringList;
  _Status : String;

  function EnvioSincrono: Boolean;
  begin
    Result := SameText(Params.Values['EnvioSincrono'], 'true');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
  end;

  procedure GetPonteirosDataSetsXpath(const aDataSetNameSucesso : string;  const aDataSetNamesFalha : TStringList;
    var aDSSucesso, aDSFalha, aDSFalhaLote : TSpdXSDClientDataSet);
  begin
    aDSSucesso := Datasets.GetDataSetByName(aDataSetNameSucesso);

    aDSFalha := Datasets.GetDataSetByXpath(aDataSetNamesFalha[0]);
    aDSFalhaLote := Datasets.GetDataSetByXpath(aDataSetNamesFalha[1]);

    if (aDSSucesso = nil) then
       RaiseException('DataSet ' + aDataSetNameSucesso + ' não foi carregado corretamente.');

    if (aDSFalha = nil) then
        RaiseException('DataSet ' + aDataSetNamesFalha[0] + ' não foi carregado corretamente.');

    if (aDSFalhaLote = nil) then
        RaiseException('DataSet ' + aDataSetNamesFalha[1] + ' não foi carregado corretamente.');

  end;

  procedure GetPonteirosDataSets(const aDataSetNameSucesso, aDatasetNameFalha : string;
                                 var aDSSucesso, aDSFalha : TSpdXSDClientDataSet);
  begin
    aDSSucesso := Datasets.GetDataSetByName(aDataSetNameSucesso);
    aDSFalha := Datasets.GetDataSetByName(aDatasetNameFalha);
   if (aDSSucesso = nil) then
     RaiseException('DataSet ' + aDataSetNameSucesso + ' não foi carregado corretamente.');
   if (aDSFalha = nil) then
     RaiseException('DataSet ' + aDatasetNameFalha + ' não foi carregado corretamente.');
  end;

  function GetMotivo(const aDSFalha : TSpdXSDClientDataSet) : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' +
        RemoveCaracteresInvalidosResposta(Input);
    end
    else if (aDSFalha <> nil) then
    begin
      aDSFalha.First;
      while Not aDSFalha.Eof do
      begin
        if aDSFalha.FieldList.IndexOf('Correcao') > -1 then
        begin
          if (Result = '') then
            Result := Format3('%s-%s (%s)', aDSFalha.FieldByName('Codigo').AsString,
                                           Trim(aDSFalha.FieldByName('Mensagem').AsString),
                                           Trim(aDSFalha.FieldByName('Correcao').AsString))
          else
            Result := Format4('%s: %s-%s (%s)', Result, aDSFalha.FieldByName('Codigo').AsString,
                                               Trim(aDSFalha.FieldByName('Mensagem').AsString),
                                              Trim(aDSFalha.FieldByName('Correcao').AsString));
        end
        else
    begin
          if (Result = '') then
            Result := Format2('%s-%s ', aDSFalha.FieldByName('Codigo').AsString,
                                       Trim(aDSFalha.FieldByName('Mensagem').AsString))
          else
            Result := Format3('%s: %s-%s ', Result, aDSFalha.FieldByName('Codigo').AsString,
                                           Trim(aDSFalha.FieldByName('Mensagem').AsString));
    end;

        aDSFalha.Next;
      end;
      Result := RemoveCaracteresInvalidosResposta(Result);

    end
    else
      Result := '';
  end;

  function GetNumeroProtocolo : string;
  begin
    Result := _DSSucesso.FieldByName('NumeroProtocolo').AsString;
  end;

  function GetStatusEnvioSincrono : string;
  begin
    if (Params.Values['faultstring'] = '') and (GetMotivo(_DSFalhaDefault) = '') then
      Result := 'SUCESSO'
    else
      Result := 'ERRO';
  end;

  function GetXmlNFSe(const aNumero : string) : string;
  begin
    Result := XmlSelect(Params.Values['XmlNFSe'], '//*[local-name()="CompNfse"]/*[local-name()="Nfse"]/*[local-name()="InfNfse"]/*[local-name()="Numero" and text()="'+aNumero+'"]/../../..');

    // Eliminar os Enters
    Result := StringReplace(Result, #10, '', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
    Result := StringReplace(Result, '&amp;', '&', [rfReplaceAll]);
    Result := StringReplace(Result, ';', '', [rfReplaceAll]);
  end;

  function GetStatus : string;
  begin
    if (_DSSucesso.FieldByName('NumeroProtocolo').AsString = '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult(var aListFields : TStringList): String;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function GetListFieldsFaulstring(var aListFields : TStringList; const aInput: string): String;
  var
    _Motivo: string;
  begin
    aListFields := CreateFieldsResponseFalha;
    try
      _Motivo := 'Falha na comunicação com WebService-' + aInput;
      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',_Motivo);
      Result := FormatLineResult(aListFields) + Params.Values['DelimitadorDaLinha'];
    Finally
      aListFields.Free;
    end;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponseEnvioAssincrono : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
  // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','NumeroProtocolo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult(aListFieldsResult) + #13#10
    else
      Result := FormatLineResult(aListFieldsResult) +
        Params.Values['DelimitadorDaLinha'];
  end;

  function GetDataAutorizacao(const aXmlNFSe: string) : string;
  begin
    XmlSelectNodeValue(aXmlNFSe,'//*[local-name()="EnviarLoteRpsSincronoResposta"]//*[local-name()="DataRecebimento"]', Result);
  end;

function GetListFieldsNota(var aDSSucesso, aDSFalha : TSpdXSDClientDataSet;
    var aListFields : TStringList; const aXpathNFSe, aParamName : string): String;
  var
    _Motivo, _ValorCampo, _XmlNota: string;
  begin
    _Motivo := GetMotivo(aDSFalha);
    _Status := GetStatusEnvioSincrono;

    if (_Motivo = '') and (_Status = 'SUCESSO') then
    begin
      aDSSucesso.First;
      while not aDSSucesso.Eof do
      begin
        aListFields := CreateFieldsResponse;
        try
          AddValueListFields('Motivo', '');
          AddValueListFields('Status', 'SUCESSO');
          AddValueListFields('Cnpj', aDSSucesso.FieldByName('CnpjPrestador').AsString);
          AddValueListFields('InscMunicipal', aDSSucesso.FieldByName('InscricaoMunicipalPrestador').AsString);
          AddValueListFields('SerieRps',  aDSSucesso.FieldByName('Serie').AsString);
          AddValueListFields('NumeroRps',  aDSSucesso.FieldByName('NumeroRPS').AsString);
          AddValueListFields('NumeroNFSe', aDSSucesso.FieldByName('NumeroNFSe').AsString);
          AddValueListFields('DataEmissaoNFSe', aDSSucesso.FieldByName('DataEmissaoNFSe').AsString);
          AddValueListFields('DataAutorizacao', GetDataAutorizacao(Params.Values['XmlNFSe']));
          AddValueListFields('CodVerificacao', aDSSucesso.FieldByName('CodigoVerificacao').AsString);


          If _ValorCampo <> '' then
            AddValueListFields('Situacao', 'CANCELADA')
          else
            AddValueListFields('Situacao', 'AUTORIZADA');

          AddValueListFields('DataCancelamento', _ValorCampo);

          AddValueListFields('ChaveCancelamento', aDSSucesso.FieldByName('NumeroNFSe').AsString);

          AddValueListFields('Xml', GetXmlNFSe(aDSSucesso.FieldByName('NumeroNFSe').AsString));

          AddValueListFields('Tipo', aDSSucesso.FieldByName('Tipo').AsString);

          Result := Result + GetResult(aListFields);
          Finally
            aListFields.Free;
          end;
          aDSSucesso.Next;
        end;
      end
      else
      begin
        aListFields := CreateFieldsResponseFalha;
        try
          AddValueListFields('Motivo', _Motivo);
          AddValueListFields('Status', 'ERRO');
          Result := Result + GetResult(aListFields);
        Finally
          aListFields.Free;
        end;
        aDSSucesso.Next;
      end;
  end;

begin
  if Params.Values['faultstring'] <> '' then
    Output := GetListFieldsFaulstring(_ListFields, Input)
  else
  begin
    Progress('Obtendo ponteiros dos datasets.');

    if EnvioSincrono then
    begin
      _ListDsNamesFalha := TStringList.Create;
      try
        _ListDsNamesFalha.add('EnviarLoteRpsSincronoResposta/ListaMensagemRetorno/MensagemRetorno');
        _ListDsNamesFalha.add('EnviarLoteRpsSincronoResposta/ListaMensagemRetorno/MensagemRetorno');

        GetPonteirosDataSetsXpath('CompNfse',_ListDsNamesFalha,_DSSucesso,_DSFalha,_DSFalhaLote);
        if _DSFalhaLote.FieldByName('Codigo').AsString <> '' then
          _DSFalhaDefault := _DSFalhaLote
        else
        begin
          _DSFalhaDefault := _DSFalha;
        end;
      finally
        _ListDsNamesFalha.Free;
      end;
    end
    else
      GetPonteirosDataSets('EnviarLoteRpsResposta', 'MensagemRetorno', _DSSucesso, _DSFalha);

    if not EnvioSincrono then
    begin
      _ListFields := CreateFieldsResponseEnvioAssincrono;
      if _ListFields <> nil then
        Try
          Progress('Adicionando valores aos campos.');
          AddValueListFields('Motivo', GetMotivo(_DSFalha));
          AddValueListFields('Status', GetStatus);
          AddValueListFields('NumeroProtocolo', GetNumeroProtocolo);
          Output := FormatLineResult(_ListFields);
        Finally
          _ListFields.Free;
        end;
    end
    else
      Output := GetListFieldsNota(_DSSucesso, _DSFalhaDefault, _ListFields, '', 'XmlNFSe');
  end;
  Progress('Valores adicionados com sucesso.');
end.

{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _DSSucesso, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Status, _Motivo : String;

  function EnvioSincrono : Boolean;
  begin
    Result := Params.Values['EnvioSincrono'] = 'true';
  end;

  procedure GetPonteirosDataSets(const aDataSetNameSucesso, aDatasetNameFalha : string;
                                 var aDSSucesso, aDSFalha : TSpdXSDClientDataSet);
  begin
    aDSSucesso := Datasets.GetDataSetByName(aDataSetNameSucesso);
    aDSFalha := Datasets.GetDataSetByName(aDatasetNameFalha);
    if (aDSSucesso = nil) then
      RaiseException('DataSet ' + aDataSetNameSucesso + ' não foi carregado corretamente.');
    if (aDSFalha = nil) then
      RaiseException('DataSet ' + aDatasetNameFalha + ' não foi carregado corretamente.');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                          Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                          Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                              Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                              Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetNumeroProtocolo : string;
  begin
    Result := _DSSucesso.FieldByName('NumeroProtocolo').AsString;
  end;

  function GetXmlNFSe: string;
  begin
    Result := XmlSelect(Params.Values['XmlNFSe'], '//*[local-name()="CompNfse"]');
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetStatus : string;
  begin
    if (_DSSucesso.FieldByName('NumeroProtocolo').AsString = '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  function GetStatusEnvioSincrono : string;
  begin
    if (Params.Values['faultstring'] = '') and (GetXmlNFSe <> '') then
      Result := 'SUCESSO'
    else
      Result := 'ERRO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','NumeroProtocolo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponseSincrono : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function GetListFieldsNota(var aDSSucesso, aDSFalha : TSpdXSDClientDataSet;
    var aListFields : TStringList; const aXpathNFSe, aParamName : string): String;
  var
    _Motivo, _ValorCampo, _XmlNota: string;
  begin
    _Motivo := GetMotivo;
    _Status := GetStatusEnvioSincrono;

    if _Status = 'SUCESSO' then
    begin
      aDSSucesso.First;
      while not aDSSucesso.Eof do
      begin
        aListFields := CreateFieldsResponseSincrono;
        try
          AddValueListFields('Motivo', '');
          AddValueListFields('Status', 'SUCESSO');
          AddValueListFields('Cnpj', aDSSucesso.FieldByName('CnpjPrestador').AsString);
          AddValueListFields('InscMunicipal', aDSSucesso.FieldByName('InscMunicipalPrestador').AsString);
          AddValueListFields('SerieRps',  aDSSucesso.FieldByName('SerieRPS').AsString);
          AddValueListFields('NumeroRps', aDSSucesso.FieldByName('NumeroRPS').AsString);
          AddValueListFields('NumeroNFSe', aDSSucesso.FieldByName('NumeroNfse').AsString);
          AddValueListFields('DataEmissaoNFSe', aDSSucesso.FieldByName('DataEmissaoRPS').AsString);
          AddValueListFields('DataAutorizacao', aDSSucesso.FieldByName('DataEmissaoNfse').AsString);
          AddValueListFields('CodVerificacao', aDSSucesso.FieldByName('CodigoVerificacao').AsString);
          _ValorCampo := aDSSucesso.FieldByName('DataCancelamento').AsString;

          If _ValorCampo <> '' then
            AddValueListFields('Situacao', 'CANCELADA')
          else
            AddValueListFields('Situacao', 'AUTORIZADA');

          AddValueListFields('DataCancelamento', _ValorCampo);
          AddValueListFields('ChaveCancelamento', aDSSucesso.FieldByName('NumeroNfse').AsString);
          AddValueListFields('Xml', GetXmlNFSe);
          AddValueListFields('Tipo', aDSSucesso.FieldByName('TipoRPS').AsString);

          Result := FormatLineResult;
        Finally
          aListFields.Free;
        end;
        aDSSucesso.Next;
      end;
    end
    else
    begin
      aListFields := CreateFieldsResponseFalha;
      try
        AddValueListFields('Motivo', _Motivo);
        AddValueListFields('Status', 'ERRO');
        Result := FormatLineResult;
      Finally
        aListFields.Free;
      end;
    end;
  end;

begin
  Progress('Obtendo ponteiros dos datasets.');
  if EnvioSincrono then
    GetPonteirosDataSets('GerarNfseResposta', 'MensagemRetorno', _DSSucesso, _DSFalha)
  else
    GetPonteirosDataSets('EnviarLoteRpsResposta', 'MensagemRetorno', _DSSucesso, _DSFalha);

  if not EnvioSincrono then
  begin
    _ListFields := CreateFieldsResponse;
    if _ListFields <> nil then
    Try
      Progress('Adicionando valores aos campos.');
      AddValueListFields('Motivo',GetMotivo);
      AddValueListFields('Status', GetStatus);
      AddValueListFields('NumeroProtocolo',GetNumeroProtocolo);
      Output := FormatLineResult;
    Finally
      _ListFields.Free;
      Progress('Valores adicionados com sucesso.');
    end;
  end
  else
    Output :=  GetListFieldsNota( _DSSucesso, _DSFalha, _ListFields, '', 'XmlNfse');
end.

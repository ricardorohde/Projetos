{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\FormatarXsdDateTime.txt}

Var
  _ListFields : TStringList;
  _Json,_Erro,_Motivo,_NumNFSe,_DataCancelamento, _Status, _XmlNfse: string;

 {/////////////////////////////////////////////////////////////////////////////////////////////////}
 {//////////////////////////////Capturar os campos do xml selecionado//////////////////////////////}
 {/////////////////////////////////////////////////////////////////////////////////////////////////}

 function GetValueJson(const aCampo: String): String;
  var
    _posIni, _posFim, _i, _y : integer;
    _valor : string;
  begin
    if pos(aCampo, _json) > 0 then
    begin
      _posIni := pos(aCampo, _json);
      _posIni := _posIni + Length(aCampo) + 3;
      if _Json[_posIni-1] <> '"' then
        _posIni := _posIni-1;
      _posFim := pos('}]', _json);
      _i := _posIni;
      for _i := _posIni to _posFim-1 do
      begin
        if _Json[_i] <> ',' then
          _valor := _valor + copy(_json, _i, 1)
        else
          Break;
      end;
    end;
    if _valor[length(_valor)] = '"' then
      _valor := copy(_valor, 1, length(_valor)-1);
    Result := _valor;
  end;

  function GetCodigo(const aXML: string): string;
  var
   _Cod : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="Codigo"]',_Cod) then
      Result := _Cod
    else
      Result := '';
  end;

  function GetMensagem(const aXML: string) : string;
  var
    _Mensagem : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="Mensagem"]',_Mensagem) then
      Result := _Mensagem
    else
      Result := '';
  end;

  function GetCorrecao(const aXML: string) : string;
  var
    _Correcao : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="Correcao"]',_Correcao) then
      Result := _Correcao
    else
     Result := '';
  end;

  function GetMotivo(const aJson: string) : string;
  var
    _Json: string;
  begin
    if aJson = '' then
    begin
      Result := 'Nota não encontrada'
    end
    else if pos('Bad Request', aJson) > 0 then
      Result := 'Nota não encontrada'
    else
      Result := aJson;
  end;

  function GetStatus : string;
  begin
    if _Motivo = 'Nota não encontrada' then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  function GetCnpj(const aXML : string) : string;
  var
    _Cnpj : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="Prestador"]//*[local-name()="Cnpj"]',_Cnpj) then
      Result := _Cnpj
    else
      Result := '';
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, '&amp;', '&',[rfReplaceAll]);
    Result := StringReplace(Result, 'amp;', '&', [rfReplaceAll]);
    Result := StringReplace(Result, '&&', '&', [rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'|',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
    Result := StringReplace(Result, ';', '\delimiter', [rfReplaceAll]);
  end;

  function GetXmlNFSe : string;
  begin
    Result := RemoveCaracteresInvalidosResposta(Params.Values['XmlNFSe']);
  end;

  function GetXml : string;
    var _XmlNfse: string;
  begin
    _XmlNfse := GetXMLNFSe;
    _XmlNfse := stringReplace(_XmlNfse, '&', '', [rfReplaceAll]);
    Result := XmlSelect(_XmlNfse,'//*[local-name()="CompNfse"]');
  end;

  function GetSituacaoNFSE(const aStatus : string) : string;
  begin
    if aStatus = '0' then
     Result := 'AUTORIZADA'
    else if aStatus = '1' then
     Result := 'CANCELADA'
    else
     Result := '';
  end;

  function GetChaveCancelamento(const aNumNota: string) : string;
  begin
    Result := '';
  end;

 function GetInscMunicipal(const aXML: string) : string;
  var
    _InscMun : string;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="Prestador"]//*[local-name()="InscricaoMunicipal"]',_InscMun) then
    if xmlSelectNodeValue(aXML,'//*[local-name()="Prestador"]//*[local-name()="InscricaoMunicipal"]',_InscMun) then
      Result := _InscMun
    else
      Result := '';
  end;

  function GetSerieRps(const aXML: string) : string;
  var
    _Serie: String;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="IdentificacaoRps"]//*[local-name()="Serie"]',_Serie) then
      Result := _Serie
    else
      Result := '';
  end;

  function GetNumeroRps(const aXML: string) : string;
  var
    _NumRps : string;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="IdentificacaoRps"]//*[local-name()="Numero"]',_NumRps) then
      Result := _NumRps
    else
      Result := '';
  end;

  function GetNumeroNFSe(const aXML: string) : string;
  var
    _Xml, _NumNfse : string;
  begin
    _Xml := StringReplace(aXML, '&', '&amp;',[rfReplaceAll]);
    if xmlSelectNodeValue(_Xml,'//*[local-name()="InfNfse"]//*[local-name()="Numero"]',_NumNfse) then
      Result := _NumNfse
    else
      Result := '';
  end;

  function GetDataEmissaoNFSe(const aXML: string) : string;
  var
    _DataEmissao : String;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="InfNfse"]//*[local-name()="DataEmissao"]',_DataEmissao) then
       Result := _DataEmissao
    else
       Result := '';
  end;

  function GetDataAutorizacao(const aXML: string) : string;
  var
      _DataAutorizacao, _DataModificada : String;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="InfNfse"]//*[local-name()="DataEmissao"]',_DataAutorizacao) then
    begin
      FormatXsdDateTime(_DataAutorizacao, _DataModificada);
      Result :=  _DataModificada;
    end
    else
      Result := '';
  end;

  function GetCodVerificacao(const aXML: string) : string;
  var
    _Xml, _CodVerificacao : String;
  begin
    _Xml := StringReplace(aXML, '&', '&amp;',[rfReplaceAll]);
    if xmlSelectNodeValue(_Xml,'//*[local-name()="InfNfse"]//*[local-name()="CodigoVerificacao"]',_CodVerificacao) then
      Result := _CodVerificacao
    else
      Result := '';
  end;

  function GetTipo(const aXML: string) : string;
  var
    _Tipo : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="IdentificacaoRps"]//*[local-name()="Tipo"]',_Tipo) then
      Result := _Tipo
    else
      Result := '';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i : integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function GetDataCancelamento(const aDataCancelamento: String) : String;
  begin
    Result := aDataCancelamento;
    if aDataCancelamento = 'null' then
      Result := '';
  end;

begin
  Progress('Carregado valores.');
  Output := '';
  _Json := Input;
  Progress('Adicionando valores aos campos');

  _Motivo := GetMotivo(_Json);
  if (_Motivo = 'Nota não encontrada') then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO');
        AddValueListFields('Motivo', 'Consulta de NFSe não retornou nota, verifique o número informado.')
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    _ListFields := CreateFieldsResponse;
    if true then
    Try
      AddValueListFields('Status', GetStatus);
      AddValueListFields('Motivo', '');
      AddValueListFields('Cnpj', GetValueJson('identificacaoPrestador'));
      AddValueListFields('InscMunicipal', GetValueJson('cmcPrestador'));
      AddValueListFields('SerieRps', '');
      AddValueListFields('NumeroRps', '');
      AddValueListFields('NumeroNFSe', GetValueJson('numero'));
      AddValueListFields('DataEmissaoNFSe', GetValueJson('dataEmissao'));
      AddValueListFields('DataAutorizacao', GetValueJson('dataProcessamento'));
      AddValueListFields('CodVerificacao', GetValueJson('cdVerificacao'));
      AddValueListFields('Situacao', GetSituacaoNFSE(GetValueJson('status')));
      AddValueListFields('DataCancelamento', GetDataCancelamento(GetValueJson('dataCancelamento')));
      AddValueListFields('ChaveCancelamento', GetValueJson('numero'));
      AddValueListFields('Xml', _Json);
      AddValueListFields('Tipo', '');

      if (Params.Values['DelimitadorDaLinha'] = '') then
        Output := Output + FormatLineResult + #13#10
      else
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];

    Finally
      _ListFields.Free;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.

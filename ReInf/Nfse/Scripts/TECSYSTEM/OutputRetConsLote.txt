{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _NFSE, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo, _Status, _Cnpj, _Im, _DataAutorizacao, _Cod, _Msg, _Correcao: String;

const
  COMANDO_MOTIVOS = '//*[local-name()="ListaMensagemRetornoLote"]/*[local-name()="MensagemRetorno"]';

  procedure GetPonteirosDataSets;
  begin
    if Params.Values['SituacaoLote'] <> '' then
    begin
      _NFSE := Datasets.GetDataSetByName('ConsultarSituacaoLoteRpsResposta');
      _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
    end
    else
    begin
      _NFSE := Datasets.GetDataSetByName('CompNfse');
      _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');

    if (_NFSE = nil) then
      RaiseException('DataSet CompNfse não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
    end;
  end;

  function GetMotivo(const aXML: string) : string;
  var
    i, _count: integer;
    _Val: string;
  begin
    if Params.Values['faultstring'] <> '' then
      Result := 'Falha na comunicação com WebService - ' + Params.Values['faultstring']
    else if (Result = '') then
    begin
      _count := XmlSelectCountNode(aXml, COMANDO_MOTIVOS);
      for i := 1 to _count do
      begin
        if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS + '['+ IntToStr(i) +']', _Val) then
        begin
          if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS + '['+ IntToStr(i) +']/*[local-name()="Codigo"]', _Cod) then
            if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS + '['+ IntToStr(i) +']/*[local-name()="Mensagem"]', _Msg) then
              if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS + '['+ IntToStr(i) +']/*[local-name()="Correcao"]', _Correcao) then
                if Result = '' then
                  Result := Format3('%s-%s (%s)', _Cod, _Msg, _Correcao)
                else
                  Result := Format4('%s: %s-%s (%s)', Result, _Cod, _Msg, _Correcao);
        end;
      end;
    end;
  end;

  function GetStatus : string;
  var
    _SituacaoLote: string;
  begin
    _SituacaoLote := Params.Values['SituacaoLote'];
    if (_SituacaoLote = '') then
    begin
      //Consulta de Lote
      if (Params.Values['SituacaoLote'] = '2') then
      begin
        Result := 'EMPROCESSAMENTO';
      end
      else
      begin
        if (_Motivo <> '') or (Params.Values['faultstring'] <> '') or (Params.Values['SituacaoLote'] = '3') then
          Result := 'ERRO'
        else
          Result := 'SUCESSO';
      end;
    end
    else
    begin
      // Consulta de situação de lote
      case StrToIntDef(_SituacaoLote, 0) of
        2: Result := 'EMPROCESSAMENTO';
        4: Result := 'SUCESSO'
      else
        Result := 'ERRO';
      end;
    end;
  end;


  function GetSituacaoNFSE : string;
  begin
    if (_NFSE.FieldByName('CodigoCancelamento').AsString = '') then
    begin
      if (_Motivo <> '') or (Params.Values['faultstring'] <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end
    else
      Result := 'CANCELADA';
  end;

  function GetChaveCancelamento : string;
  begin
    Result := _NFSE.FieldByName('NumeroNFSe').AsString;
  end;

  function GetXmlNFSe(const aNumero : string) : string;
  begin
    Result := XmlSelect(Params.Values['XmlLote'], '//*[local-name()="CompNfse"]');

    // Eliminar os Enters e os tabs
    Result := StringReplace(Result, #10, '', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
    Result := StringReplace(Result, #9, '', [rfReplaceAll]); // Tab
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml',
        'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

   //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  function CreateFieldsResponseProcessamento : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  Output := '';

  if Params.Values['SituacaoLote'] = '' then
  begin
    Progress('Obtendo ponteiros dos DataSets.');
    GetPonteirosDataSets;

    Progress('Adicionando valores aos campos');
    _NFSE.First;
    _Motivo := GetMotivo(Params.Values['XmlLote']);
    _Status := GetStatus;

    if _Status = 'EMPROCESSAMENTO' then
    begin
      _ListFields := CreateFieldsResponseProcessamento;
      try
        AddValueListFields('Status', _Status);

        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      finally
        _ListFields.Free;
      end;
    end
    else if _Motivo <> '' then
    begin
      _ListFields := CreateFieldsResponseFalha;
      Try
        AddValueListFields('Status', 'ERRO');
        AddValueListFields('Motivo', _Motivo);

        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      Finally
        _ListFields.Free;
      end;
    end
    else
    begin
      while Not _NFSE.Eof Do
      begin
        _ListFields := CreateFieldsResponse;
        Try
          if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
          begin
            AddValueListFields('Status', 'SUCESSO');
            AddValueListFields('Motivo', GetMotivo(Params.Values['XmlLote']));
            if XmlSelectNodeValue(Params.Values['XmlLote'], '//*[local-name()="Prestador"]//*[local-name()="Cnpj"]', _Cnpj) then
              AddValueListFields('Cnpj', _Cnpj);
            if XmlSelectNodeValue(Params.Values['XmlLote'], '//*[local-name()="Prestador"]//*[local-name()="InscricaoMunicipal"]', _Im) then
              AddValueListFields('InscMunicipal', _Im);
            AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
            AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
            AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
            AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
            if XmlSelectNodeValue(Params.Values['XmlLote'], '//*[local-name()="InfNfse"]/*[local-name()="DataEmissao"][1]', _DataAutorizacao) then
              AddValueListFields('DataAutorizacao', _DataAutorizacao);
            AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
            AddValueListFields('Situacao', GetSituacaoNFSe);
            AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
            AddValueListFields('ChaveCancelamento', GetChaveCancelamento);
            AddValueListFields('Xml', GetXmlNFSe(_NFSE.FieldByName('NumeroNFSe').AsString));
            AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);
            if (Params.Values['DelimitadorDaLinha'] = '') then
              Output := Output + FormatLineResult + #13#10
            else
              Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
          end;
        Finally
          _ListFields.Free;
        end;
        _NFSE.Next;
      end;
    end;
  end
  else
  begin
    // Consulta de situação de lote
    Progress('Adicionando valores aos campos.');
    _Status := GetStatus;

    _ListFields := TStringList.Create;
    try
      if _Status = 'EMPROCESSAMENTO' then
      begin
        _ListFields.Add('Status');
        AddValueListFields('Status', _Status);
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end
      else if _Status = 'ERRO' then
      begin
        _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
        _ListFields.Add('Status');
        _ListFields.Add('Motivo');
        AddValueListFields('Status', 'ERRO');
        AddValueListFields('Motivo', GetMotivo(Params.Values['XmlLote']));
        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end
      else
      begin
        _ListFields := CreateFieldsResponse;

        AddValueListFields('Status', 'SUCESSO');
        AddValueListFields('Motivo', '');
        AddValueListFields('Cnpj', '');
        AddValueListFields('InscMunicipal', '');
        AddValueListFields('SerieRps', '');
        AddValueListFields('NumeroRps', '');
        AddValueListFields('NumeroNFSe', '');
        AddValueListFields('DataEmissaoNFSe', '');
        AddValueListFields('DataAutorizacao', '');
        AddValueListFields('CodVerificacao', '');
        AddValueListFields('Situacao', '');
        AddValueListFields('DataCancelamento', '');
        AddValueListFields('ChaveCancelamento', '');
        AddValueListFields('Xml', '');
        AddValueListFields('Tipo', '');

        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
      end;
    finally
      _ListFields.Free;
    end;
  end;

  Progress('Valores adicionados com sucesso.');
end.

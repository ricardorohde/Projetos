 {
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
    Params : TStringList;
}

{$I ..\Comuns\Utils.txt}

function CorrigeXmlWebiss(const aXML: string): string;
begin
  Result := aXML;
  Result:= StringReplace(Result, '&amp;apos;', '&apos;', [rfReplaceAll]);
  Result:= StringReplace(Result, '&amp;quot;', '&quot;',  [rfReplaceAll]);
  Result:= StringReplace(Result, '&amp;#39', '&#39',  [rfReplaceAll]);
  Result:= StringReplace(Result, '&amp;lt;', '&lt;',  [rfReplaceAll]);
  Result:= StringReplace(Result, '&amp;gt;', '&gt;',  [rfReplaceAll]);
  Result:= StringReplace(Result, '#$A', '',  [rfReplaceAll]);
  Result:= StringReplace(Result, '''', '',  [rfReplaceAll]);
  //WebIss retorna a quebra de linha da forma abaixo.
  Result:= StringReplace(Result, '&amp;#xD;', '&#xD;',  [rfReplaceAll]);
end;

Var
  _Xml,_SituacaoLote, _Situacao, _FaultString : string;
begin
  Progress('Carregando configurações do XSDDataset');

  Datasets.XsdFile := PathXsd + 'servico_enviar_lote_rps_resposta.xsd';
  Datasets.XsdElementName := 'ConsultarLoteRpsResposta';
  Datasets.ConfigSection := 'RETORNO_CONSULTARLOTE';
  if Trim(MappingXsdFileName) <> '' then
    Datasets.MappingFileName := MappingXsdFileName;
  Progress('Criando XSDDataset.');
  Datasets.CreateXSDDataset;

  _Xml := UnEscapeXml(Input);
  _Xml := CorrigeXmlWebiss(_Xml);
  _Xml := StringReplace(_Xml, '<?xml version="1.0" encoding="utf-8"?>', '', [RfReplaceAll]);
  //Capturando o xml da consulta de situação do lote.

  if Pos('ConsultarSituacaoLoteRpsResposta', _Xml) > 0 then
    _Xml := StringReplace(_Xml, '&#xD', '',  [rfReplaceAll]);

  _SituacaoLote :=  XmlDeepNodeSearch(_Xml,'ConsultarSituacaoLoteRpsResposta','//*[local-name()="ConsultarSituacaoLoteRpsResposta"]');

  if _SituacaoLote <> '' then
  begin
    if xmlSelectNodeValue(_SituacaoLote,'//*[local-name()="Situacao"]',_Situacao) then
      Params.Add('SituacaoLote='+_Situacao)
    else
      Params.Add('SituacaoLote='+_SituacaoLote);
  end
  else
  begin
    if Pos('&amp;', Input) = 0 then
      _Xml := StringReplace(Input, '&',  '&amp;',  [rfReplaceAll])
    else
      _Xml := Input;

    _Xml := CorrigeXml(_Xml);

    if Pos('<!--CRLF-->', _Xml) > 0 then
    begin
      _Xml := StringReplace(_Xml, '&#xD;<!--CRLF-->', #13#10, [rfReplaceAll]);
      _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName, '//*[local-name()="ConsultarLoteRpsResposta"]');
      _Xml := StringReplace(_Xml, #13#10, '<!--CRLF-->', [rfReplaceAll]);
    end
    else
      _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName, '//*[local-name()="ConsultarLoteRpsResposta"]');

    _FaultString := XmlSelect(Input,'//*[local-name()="faultstring"]');
    if _FaultString <> '' then
      Params.Add('faultstring='+_FaultString)
    else
    begin
      Datasets.LoadFromXMLContent(_Xml);
      Params.Add('XmlLote='+_Xml);
      Progress('XML carregado com sucesso');
    end;
  end;
end.

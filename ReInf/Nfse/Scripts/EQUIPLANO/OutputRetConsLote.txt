{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _ListFields : TStringList;
  i : integer;
  _Xml,_Erro,_Motivo,_NumNFSe,_DataCancelamento, _Status: string;

 {/////////////////////////////////////////////////////////////////////////////////////////////////}
 {//////////////////////////////Capturar os campos do xml selecionado//////////////////////////////}
 {/////////////////////////////////////////////////////////////////////////////////////////////////}
  function GetCodigo(const aXML: string): string;
  var
   _Cod : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[namespace-uri()="" and local-name()="cdMensagem"]',_Cod) then
      Result := _Cod
    else
      Result := '';
  end;

  function GetMensagem(const aXML: string) : string;
  var
    _Mensagem : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[namespace-uri()="" and local-name()="dsMensagem"]',_Mensagem) then
      Result := _Mensagem
    else
      Result := '';
  end;

  function GetCorrecao(const aXML: string) : string;
  var
    _Correcao : String;
  begin
    if xmlSelectNodeValue(aXml,'//*[namespace-uri()="" and local-name()="dsCorrecao"]',_Correcao) then
      Result := _Correcao
    else
      Result := '';
  end;

  function GetMotivo(const aXML: string; aNum : integer) : string;
  var
     i : integer;
     _XML: string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else
    begin
      for i := 0 to  aNum - 1 do
      begin
        _XML := XmlSelectItemIndexNode(aXML,'//*[namespace-uri()="" and local-name()="mensagemRetorno"]',I);
        if (Result = '') then
          Result := Format3('%s-%s (%s)', GetCodigo(_XML),
                                          Trim(GetMensagem(_XML)),
                                          Trim(GetCorrecao(_XML)))
        else
          Result := Format4('%s: %s-%s (%s)', Result, GetCodigo(_XML),
                                              Trim(GetMensagem(_XML)),
                                              Trim(GetCorrecao(_XML)));
      end;
    end;
  end;

  function GetCnpj(const aXML : string) : string;
  begin
    Result := '';
  end;

  function GetStatus(const aXML: String) : string;
  var
    _cdMsg, _dsMsg: string;
  begin
    if xmlSelectNodeValue(aXml,'//*[namespace-uri()="" and local-name()="cdMensagem"]',_cdMsg) and
      xmlSelectNodeValue(aXml,'//*[namespace-uri()="" and local-name()="dsMensagem"]',_dsMsg) then
    begin
      if (_cdMsg = '1604') and (Pos('processamento', _dsMsg) > 0) then
      begin
        Result := 'EMPROCESSAMENTO';
      end;
    end
    else
    begin
      if (_Motivo <> '') or (Params.Values['faultstring'] <> '') then
        Result := 'ERRO'
      else
        Result := 'SUCESSO';
    end;
  end;


  function GetSituacaoNFSE(const aDataCancelamento : string) : string;
  begin
    if (aDataCancelamento = '') then
      Result := 'AUTORIZADA'
    else
      Result := 'CANCELADA';
  end;

  function GetChaveCancelamento(const aNumNota: string) : string;
  begin
    Result := '';
  end;

  function GetInscMunicipal(const aXML: string) : string;
  begin
    Result := '';
  end;

  function GetSerieRps(const aXML: string) : string;
  begin
    Result := '';
  end;

  function GetNumeroRps(const aXML: string) : string;
  var
    _NumRps : string;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="nfse"]//*[local-name()="nrRps"]',_NumRps) then
      Result := _NumRps
    else
      Result := '';
  end;

  function GetNumeroNFSe(const aXML: string) : string;
  var
    _NumNfse : string;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="nfse"]//*[local-name()="nrNfse"]',_NumNfse) then
      Result := _NumNfse
    else
      Result := '';
  end;

  function GetDataEmissaoNFSe(const aXML: string) : string;
  var
    _DataEmissao : String;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="nfse"]//*[local-name()="dtEmissaoNfs"]',_DataEmissao) then
      Result := _DataEmissao
    else
      Result := '';
  end;

  function GetDataAutorizacao(const aXML: string) : string;
  var
    _DataAutorizacao : String;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="nfse"]//*[local-name()="dtEmissaoNfs"]',_DataAutorizacao) then
      Result := _DataAutorizacao
    else
      Result := '';
  end;

  function GetCodVerificacao(const aXML: string) : string;
  var
    _CodVerificacao : String;
  begin
    if xmlSelectNodeValue(aXML,'//*[local-name()="nfse"]//*[local-name()="cdAutenticacao"]',_CodVerificacao) then
      Result := _CodVerificacao
    else
      Result := '';
  end;

  function GetDataCancelamento(const aXML: string) : string;
  var
    _DataCancelamento: String;
  begin
    if xmlSelectNodeValue(aXml,'//*[local-name()="nfse"]//*[local-name()="cancelamento"]//*[local-name()="dtCancelamento"]',_DataCancelamento) then
      Result := _DataCancelamento
    else
      Result := '';
  end;

  function GetTipo(const aXML: string) : string;
  var
    _Tipo : String;
  begin
    if xmlSelectNodeValue(_Xml,'//*[local-name()="nfse"]//*[local-name()="nrEmissorRps"]',_Tipo) then
      Result := _Tipo
    else
      Result := '';
  end;

 {/////////////////////////////////////////////////////////////////////////////////////////////////}
 {//////////////////////////////Capturar os campos do xml selecionado//////////////////////////////}
 {/////////////////////////////////////////////////////////////////////////////////////////////////}

  //Função para capturar o número de NFSe's contidas no lote.
  function GetNumNotas(const aXML: string) : integer;
  begin
    Result := XmlSelectCountNode(aXML,'//*[local-name()="nfse"]');

    if Result = 0 then
      Result := XmlSelectCountNode(aXML,'//*[local-name()="listaErros"]');
  end;

  function GetNumErros(const aXML: String): integer;
  begin
    Result := XmlSelectCountNode(aXML,'//*[local-name()="erro"]')
  end;


  function GetXml(const aIndex: integer) : string;
  var
    _Xml : String;
  begin
    _Xml := XmlSelectItemIndexNode(Params.Values['XmlLote'],'//*[local-name()="nfse"]',aIndex);
    Result := ExtractXMLIndent(_Xml);

    //if Result = '' then
    // Result := XmlSelectItemIndexNode(Params.Values['XmlLote'],'//*[namespace-uri()="http://www.abrasf.org.br/nfse.xsd" and //local-name()="ListaMensagemRetornoLote"]',aIndex)
  end;

  function GetXmlNFSe(const aNumero: string): string;
  var
    _Xml : String;
  begin
    _Xml := XmlSelect(Params.Values['XmlLote'],'//*[namespace-uri()="" and local-name()="listaNfse"]/*[local-name()="nfse"]/*[local-name()="nrNfse" and text()="'+aNumero+'"]/../.');
    Result := ExtractXMLIndent(_Xml);
  end;

  function CreateFieldsResponseProcessamento : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
   _i : integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
       // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  _Xml := Params.Values['XmlLote'];
  Progress('Carregado valores.');
  Output := '';
  Progress('Adicionando valores aos campos');
  _Motivo := GetMotivo(_XML,GetNumErros(_XML));
  _Status := GetStatus(_Xml);
  if (_Status = 'EMPROCESSAMENTO') then
  begin
    try
        _ListFields := CreateFieldsResponseProcessamento;
        AddValueListFields('Status', _Status);

        Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    finally
        _ListFields.Free;
    end;
  end
  else if (_Motivo <> '') or (_Xml = '') then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;
      AddValueListFields('Status', 'ERRO');
      if _Xml <> '' then
        AddValueListFields('Motivo',_Motivo)
      else
        AddValueListFields('Motivo',Input);
      Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    for i := 0 to  GetNumNotas(Params.Values['XmlLote']) -1 do
    begin
      _ListFields := CreateFieldsResponse;
      _Xml := GetXml(i);
      _DataCancelamento := GetDataCancelamento(_Xml);
      _Motivo := GetMotivo(_XML,GetNumErros(_XML));
      _NumNFSe := GetNumeroNFSe(_Xml);
      if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
      Try
        AddValueListFields('Status', GetStatus(_Motivo));
        AddValueListFields('Motivo', _Motivo);
        if (_Motivo = '') then
        begin
          AddValueListFields('Cnpj', GetCnpj(_Xml));
          AddValueListFields('InscMunicipal', GetInscMunicipal(_Xml));
          AddValueListFields('SerieRps', GetSerieRps(_Xml));
          AddValueListFields('NumeroRps', GetNumeroRps(_Xml));
          AddValueListFields('NumeroNFSe', _NumNFSe);
          AddValueListFields('DataEmissaoNFSe', GetDataEmissaoNFSe(_Xml));
          AddValueListFields('DataAutorizacao', GetDataAutorizacao(_Xml));
          AddValueListFields('CodVerificacao', GetCodVerificacao(_Xml));
          AddValueListFields('Situacao', GetSituacaoNFSe(_DataCancelamento));
          AddValueListFields('DataCancelamento', _DataCancelamento);
          AddValueListFields('ChaveCancelamento', GetChaveCancelamento(_NumNFSe));
          AddValueListFields('Xml',GetXMLNFSe(_NumNFse));
          AddValueListFields('Tipo', GetTipo(_Xml));
        end
        else
        begin
          AddValueListFields('Cnpj', '');
          AddValueListFields('InscMunicipal', '');
          AddValueListFields('SerieRps', '');
          AddValueListFields('NumeroRps', '');
          AddValueListFields('NumeroNFSe', '');
          AddValueListFields('DataEmissaoNFSe', '');
          AddValueListFields('DataAutorizacao', '');
          AddValueListFields('CodVerificacao', '');
          AddValueListFields('Situacao', '');
          AddValueListFields('DataCancelamento', '');
          AddValueListFields('ChaveCancelamento', '');
          AddValueListFields('Xml','');
          AddValueListFields('Tipo', '');
        end;

        if (Params.Values['DelimitadorDaLinha'] = '') then
             Output := Output + FormatLineResult + #13#10
        else
          Output := Output + FormatLineResult + Params.Values['DelimitadorDaLinha'];

      Finally
        _ListFields.Free;
      end;
    end;
  end;
  Progress('Valores adicionados com sucesso.');

end.

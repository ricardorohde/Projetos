{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}
{$I ..\Comuns\Utils.txt}
Var
  _DSSucesso, _DSFalha, _DSAlerta : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo : String;

const
  COMANDO_MOTIVOS = '//*[local-name()="Erros"]/*[local-name()="Erro"]';

  procedure GetPonteirosDataSets;
  begin
    _DSSucesso := Datasets.GetDataSetByName('RetornoCancelamentoNFSe');
    _DSFalha := Datasets.GetDataSetByName('Erro');
    _DSAlerta := Datasets.GetDataSetByName('Alerta');
   if (_DSSucesso = nil) then
     RaiseException('DataSet CancelarNfseResposta não foi carregado corretamente.');
   if (_DSFalha = nil) then
     RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
   if (_DSAlerta = nil) then
     RaiseException('DataSet Alerta não foi carregado corretamente.');
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
  end;

  function GetMotivo(const aXML: string) : string;
  var
    i, _count: integer;
    _Val, _Cod, _Desc: string;
  begin
    if Params.Values['faultstring'] <> '' then
      Result := 'Falha na comunicação com WebService - ' + Params.Values['faultstring']
    else if (Result = '') then
    begin
      _count := XmlSelectCountNode(aXml, COMANDO_MOTIVOS);
      for i := 1 to _count do
      begin
        if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS +'['+ IntToStr(i) +']'+ '/*[local-name()="Codigo"]', _Cod) and
           XmlSelectNodeValue(aXml, COMANDO_MOTIVOS + '['+ IntToStr(i) +']'+ '/*[local-name()="Descricao"]', _Desc) then
        begin
          _Val := _Cod + '-' + _Desc;
          if Result = '' then
            Result := _Val
          else
            Result := Result + '-' + _Val;
        end;
      end;
      if (Result = '') then
      begin
        for i := 1 to _count do
        begin
          if XmlSelectNodeValue(aXml, COMANDO_MOTIVOS +'['+ IntToStr(i) +']', _Desc) then
          begin
            if Result = '' then
              Result := _Desc
            else
              Result := Result + '-' + _Desc;
          end;
        end;
      end;
    end;

    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetStatus : string;
  begin
    if (_Motivo = '') then
       Result := 'SUCESSO'
    else
       Result := 'ERRO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo'];
  end;

begin
  Progress('Obtendo ponteiros dos DataSets.');
  GetPonteirosDataSets;
  _ListFields := CreateFieldsResponse;
  _Motivo := GetMotivo(Params.Values['Xml']);
  if _ListFields <> nil then
  Try
    Progress('Adicionando valores aos campos');
    AddValueListFields('Motivo',_Motivo);
    AddValueListFields('Status',GetStatus);
    AddValueListFields('DataCancelamento','');
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;
end.

{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2: TStringList;
  _CamposMunicipio: TStringList;
  _DsTecnoAtual: TSpdXSDClientDataSet;
  _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo : string;
  _ValorCampoVal, _ValorCampoValtrib : string;
  _NomeCampo: string;
  _inicio: Integer;
  _linha: string;
  _PastaTecnoNFSe: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';
  DSCIDADE_NOTA = 'EmissaoNota';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\AbreArquivos.txt}
{$I ..\Comuns\Comuns.txt}

  procedure ExceptionValorInvalidoCampo(const aNomeCampo: string);
  begin
    RaiseException('Valor inválido para o campo: ' + aNomeCampo);
  end;

  procedure SetarCampoCurrencyGiap(const aCampoTecno, aCampoGiap: string);
  var
    _ValorCur: Currency;
    _ValorStr: string;
  begin
    if (CampoTecno(aCampoTecno) = '0.00') or (CampoTecno(aCampoTecno) = '0,00') then
      Campo(_DsCidadeAtual, aCampoGiap).AsString := '0,00'
    else
    begin
      if CampoTecno(aCampoTecno) <> '' then
      begin
        try
          _ValorCur := AnyCurrencyToCurrency(CampoTecno(aCampoTecno));
          _ValorStr := CurrToStr(_ValorCur);  // Separador de decimal é a vírgula
        except
          RaiseException('Não foi possível realizar a conversão do campo: ' + aCampoTecno);
        end;

        Campo(_DsCidadeAtual, aCampoGiap).AsString := _ValorStr;
      end
      else
        Campo(_DsCidadeAtual, aCampoGiap).AsString := '0,00';
    end;
  end;

  function RetiraFormatacaoCpfCnpjCampo(const aCampo: String) : String;
  var
    _CpfCnpjSemFormatacao : String;
  begin
    _CpfCnpjSemFormatacao := StringReplace(aCampo, '.', '', [rfReplaceAll]);
    _CpfCnpjSemFormatacao := StringReplace(_CpfCnpjSemFormatacao, '-', '', [rfReplaceAll]);
    Result := StringReplace(_CpfCnpjSemFormatacao, '/', '', [rfReplaceAll]);
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      // Editar dados carregados no Datasets, para fazer algumas transformações
      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        SetarCampoValor('InscricaoMunicipal', CampoTecno('InscricaoMunicipalPrestador'));

        SetarCampo('NumeroRps');

        SetarCampoValor('Operacao', '5');  // Fixo

        SetarCampoValor('DescricaoObservacao', CampoTecno('DiscriminacaoServico'));

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'DD/MM/YYYY');
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          SetarCampoValor('DataCompetencia', _ValorCampo);
        end;

        SetarCampoValor('ValorNf', CampoTecno('ValorServicos'));
        SetarCampoValor('ValorBaseCalculo', CampoTecno('BaseCalculo'));
        SetarCampoCurrencyGiap('DescontoIncondicionado', 'DescontosLegais');

        SetarCampoCurrencyGiap('ValorInss', 'ValorInss');
        SetarCampoCurrencyGiap('ValorIR', 'ValorIrrf');
        SetarCampoCurrencyGiap('ValorCsll', 'ValorCsll');
        SetarCampoCurrencyGiap('ValorPis', 'ValorPis');
        SetarCampoCurrencyGiap('ValorCofins', 'ValorCofins');

        _ValorCampo := CampoTecno('CpfCnpjTomador');
        if _ValorCampo <> '' then
        begin
          _ValorCampo := RetiraFormatacaoCpfCnpjCampo(_ValorCampo);
          case length(_ValorCampo) of
            11 : SetarCampoValor('NumCpf', _ValorCampo);
            14 : SetarCampoValor('NumCnpj', _ValorCampo);
          else
            ExceptionValorInvalidoCampo('CpfCnpjTomador');
          end;
        end;

        SetarCampoValor('InscMunicipalTomador', CampoTecno('InscricaoMunicipalTomador'));
        SetarCampoValor('RazaoSocial', CampoTecno('RazaoSocialTomador'));
        SetarCampoValor('Endereco', CampoTecno('EnderecoTomador'));
        SetarCampoValor('Numero', CampoTecno('NumeroTomador'));
        SetarCampoValor('Complemento', CampoTecno('ComplementoTomador'));
        SetarCampoValor('Bairro', CampoTecno('BairroTomador'));
        SetarCampoValor('Cidade', CampoTecno('DescricaoCidadeTomador'));
        SetarCampoValor('Uf', CampoTecno('UfTomador'));
        SetarCampoValor('Cep', CampoTecno('CepTomador'));
        VerificaDDD('TelefoneTomador', 'Telefone', 'DDDTomador');
        SetarCampoValor('Email', CampoTecno('EmailTomador'));
        SetarCampoValor('InscricaoEstadual', CampoTecno('InscricaoEstadualTomador'));

        _ValorCampo := CampoTecno('CidadeEstrangeiraTomador');
        if _ValorCampo <> '' then
          SetarCampoValor('StaEstrangeiro', 'S')
        else
          SetarCampoValor('StaEstrangeiro', 'N');


        SetarCampoValor('NumeroCnaeAtividade', CampoTecno('CodigoCnae'));
        SetarCampoValor('CnaeItemLista', CampoTecno('CodigoItemListaServico'));

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
          SetarCampoValor('AliquotaSimplesNacional', CampoTecno('AliquotaISS'))
        else
          RaiseException('Valor inválido para o campo AliquotaISS.');

        SetarCampoValor('NomCidadePrestacao', CampoTecno('DescricaoCidadePrestacao'));

        // IssRetido --> IssPagoTomadorServico: se é retido (na fonte), então é o tomador que paga
        _ValorCampo := CampoTecno('IssRetido');
        case AnsiIndexText(_ValorCampo, ['1', 'sim', 'true', '2', 'nao', 'não', 'false']) of
          0, 1, 2 : SetarCampoValor('IssPagoTomadorServico', 'S');
          3, 4, 5, 6 : SetarCampoValor('IssPagoTomadorServico', 'N')
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      SetarCamposMunicipio;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.Free;
    _CamposMunicipio.Free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\Utils.txt}

Var
  _DSSucesso, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;

  function EnvioSincrono : Boolean;
  begin
    Result := Params.Values['EnvioSincrono'] = 'true';
  end;

  procedure GetPonteirosDataSetsPublica;
  begin
    if EnvioSincrono then
    begin
      _DSSucesso := Datasets.GetDataSetByName('CompNfse');
      _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
      if (_DSSucesso = nil) then
        RaiseException('DataSet GerarNfseResposta não foi carregado corretamente.');
      if (_DSFalha = nil) then
        RaiseException('DataSet MensagemRetorno não foi carregado corretamente.')
    end
    else
    begin
      _DSSucesso := Datasets.GetDataSetByName('EnviarLoteRpsResposta');
      _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
      if (_DSSucesso = nil) then
        RaiseException('DataSet EnviarLoteRpsResposta não foi carregado corretamente.');
      if (_DSFalha = nil) then
        RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
    end;
  end;

  function TrataQuebraDeLinha(const aXml, aTag: string): string;
  var
    _Xml, _conteudo, _substitui: string;
  begin
    _Xml := aXml;
    _conteudo := GetValueTag(aTag,_Xml);
    _substitui := StringReplace(_conteudo, #10, '', [rfReplaceAll]);
    _substitui := StringReplace(_substitui, '&amp;#xD;', '', [rfReplaceAll]);
    _substitui := StringReplace(_substitui, #13, '|', [rfReplaceAll]);
    _Xml := StringReplace(_Xml,_conteudo,_substitui, [rfReplaceAll]);
    Result := _Xml;
  end;

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    Result := StringReplace(aValue, '&amp;',  '&',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    Result := StringReplace(Result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    Result := StringReplace(Result, #13,'',[rfReplaceAll]);
    Result := StringReplace(Result, #10,'',[rfReplaceAll]);
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                          Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                          Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                              Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                              Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetNumeroProtocolo : string;
  begin
    Result := _DSSucesso.FieldByName('NumeroProtocolo').AsString;
  end;

  function GetStatus : string;
  begin
    if (_DSSucesso.FieldByName('NumeroProtocolo').AsString = '') then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','NumeroProtocolo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult + #13#10
    else
      Result := FormatLineResult +
        Params.Values['DelimitadorDaLinha'];
  end;

  function RetornouNota: Boolean;
  var
    _str, _Xml: string;
  begin
    _Xml := StringReplace(Input, '<!--CRLF-->', '', [rfReplaceAll]);
    _Xml := ExtractEscapedContent(_Xml);
    if (xmlSelectNodeValue(_Xml, '//*[local-name() = "CompNfse"]', _str)) then
      Result :=  true;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponseNota : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de Resultado
  procedure AddValueListFields(const aFieldName : string; const aFieldValue : string;
    var aListFields : TStringList);
  begin
    if aListFields.IndexOf(aFieldName) > -1 then
      aListFields[aListFields.IndexOf(aFieldName)] := aFieldValue;
  end;

  function GetXmlNFSe(const aXpath, aParamName : string) : string;
  begin
    if aXpath = '' then
      Result := XmlSelect(Params.Values[aParamName], '//*[local-name()="CompNfse"]')
    else
      Result := XmlSelect(Params.Values[aParamName], aXpath);

    Result := TrataQuebraDeLinha(Result, 'Discriminacao');
    Result := TrataQuebraDeLinha(Result, 'OutrasInformacoes');
    Result := RemoveCaracteresInvalidosResposta(Result);
  end;

  function GetListFieldsNota(var aDSSucesso, aDSFalha : TSpdXSDClientDataSet;
    var aListFields : TStringList; const aXpathNFSe, aParamName : string): String;
  var
    _Motivo, _ValorCampo: string;
  begin
    _Motivo := GetMotivo;

    //SUCESSO
    if RetornouNota then
    begin
      aDSSucesso.First;
      while not aDSSucesso.Eof do
      begin
        aListFields := CreateFieldsResponseNota;
        try
          AddValueListFields('Motivo', '', aListFields);
          AddValueListFields('Status', 'SUCESSO', aListFields);
          _ValorCampo := aDSSucesso.FieldByName('Cnpj').AsString;

          if _ValorCampo <> '' then
            AddValueListFields('Cnpj', _ValorCampo, aListFields)
          else
            AddValueListFields('Cnpj', aDSSucesso.FieldByName('CnpjPrestador').AsString,
              aListFields);

          _ValorCampo := aDSSucesso.FieldByName('InscricaoMunicipal').AsString;

          if _ValorCampo <> '' then
            AddValueListFields('InscMunicipal', _ValorCampo, aListFields)
          else
            AddValueListFields('InscMunicipal',
              aDSSucesso.FieldByName('InscMunicipalPrestador').AsString, aListFields);

          AddValueListFields('SerieRps',  aDSSucesso.FieldByName('SerieRPS').AsString,
            aListFields);
          AddValueListFields('NumeroRps', aDSSucesso.FieldByName('NumeroRps').AsString,
            aListFields);
          AddValueListFields('NumeroNFSe', aDSSucesso.FieldByName('NumeroNfse').AsString,
            aListFields);
          AddValueListFields('DataEmissaoNFSe', aDSSucesso.FieldByName('DataEmissaoRPS').AsString,
            aListFields);
          AddValueListFields('DataAutorizacao', aDSSucesso.FieldByName('DataEmissaoNfse').AsString,
            aListFields);
          AddValueListFields('CodVerificacao',
            aDSSucesso.FieldByName('CodigoVerificacao').AsString, aListFields);

          _ValorCampo := aDSSucesso.FieldByName('DataHoraCancelamento').AsString;

          If _ValorCampo <> '' then
            AddValueListFields('Situacao', 'CANCELADA', aListFields)
          else
            AddValueListFields('Situacao', 'AUTORIZADA', aListFields);

          AddValueListFields('DataCancelamento', _ValorCampo, aListFields);

          AddValueListFields('ChaveCancelamento', aDSSucesso.FieldByName('NumeroNfse').AsString,
              aListFields);

          AddValueListFields('Xml', GetXmlNFSe(Format1(aXpathNFSe, aDSSucesso.FieldByName('NumeroNfse').AsString),
                               aParamName), aListFields);

          AddValueListFields('Tipo', aDSSucesso.FieldByName('TipoRPS').AsString, aListFields);

          Result := Result + GetResult(aListFields);
        Finally
          aListFields.Free;
        end;
        aDSSucesso.Next;
      end;
    end
    else
    begin
      //ERRO
      If _Motivo <> '' then
      begin
        aListFields := CreateFieldsResponseNota;
        try
          AddValueListFields('Motivo', _Motivo, aListFields);
          AddValueListFields('Status', 'ERRO', aListFields);
          AddValueListFields('Cnpj', '', aListFields);
          AddValueListFields('InscMunicipal', '', aListFields);
          AddValueListFields('SerieRps',  '', aListFields);
          AddValueListFields('NumeroRps', '', aListFields);
          AddValueListFields('NumeroNFSe', '', aListFields);
          AddValueListFields('DataEmissaoNFSe', '', aListFields);
          AddValueListFields('DataAutorizacao', '', aListFields);
          AddValueListFields('CodVerificacao', '', aListFields);
          AddValueListFields('Situacao', '', aListFields);
          AddValueListFields('DataCancelamento', '', aListFields);
          AddValueListFields('ChaveCancelamento', '', aListFields);
          AddValueListFields('Xml', '', aListFields);
          AddValueListFields('Tipo', '', aListFields);
          Result := Result + GetResult(aListFields);
        Finally
          aListFields.Free;
        end;
      end;
    end;
  end;

begin
  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSetsPublica;
  if not EnvioSincrono then
  begin
    _ListFields := CreateFieldsResponse;
    if _ListFields <> nil then
    begin
      Try
        Progress('Adicionando valores aos campos.');
        AddValueListFields('Motivo',GetMotivo, _ListFields);
        AddValueListFields('Status', GetStatus, _ListFields);
        AddValueListFields('NumeroProtocolo',GetNumeroProtocolo, _ListFields);
        Output := FormatLineResult;
      Finally
        _ListFields.Free;
      end;
    end;
  end
  else
    Output :=  GetListFieldsNota( _DSSucesso, _DSFalha, _ListFields, '', 'XmlNfse');

  Progress('Valores adicionados com sucesso.');
end.
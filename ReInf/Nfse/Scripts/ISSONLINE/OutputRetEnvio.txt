{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

{$I ..\Comuns\Utils.TXT}

Var
  _ListFields : TStringList;


  function GetStatus : string;
  var
    _Sucesso, _Erro, _Xml: string;
  begin
    _Xml := Params.Values['XML'];

    _Sucesso := Trim(xmlSelect(_Xml, '//*[local-name()="Mensagem"]'));
    _Erro := xmlSelect(_Xml, '//*[local-name()="NFSE"]//*[local-name()="INCONSISTENCIA"]//*[local-name()="ERRO"]');

    if (_Sucesso <> '') and (_Erro = '') then
      Result := 'SUCESSO'
    else
      Result := 'ERRO';
  end;

  function GetMotivo : string;
  var
    _Mensagem, _Xml : string;
  begin
    _Xml := Params.Values['XML'];

    if XmlSelectNodeValue(_Xml, '//*[local-name()="NFSE"]//*[local-name()="INCONSISTENCIA"]//*[local-name()="ERRO"]',
      _Mensagem) then
      Result := _Mensagem;
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);

      // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','NumeroProtocolo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

begin
  _ListFields := CreateFieldsResponse;
  if _ListFields <> nil then
  Try
    Progress('Adicionando valores aos campos.');
    AddValueListFields('Motivo', GetMotivo);
    AddValueListFields('Status', GetStatus);
    AddValueListFields('NumeroProtocolo', '');
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;
end.

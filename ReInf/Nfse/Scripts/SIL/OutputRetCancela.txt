{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _ListFields : TStringList;
  _Status, _Xml: String;

const
  XPATH_CANC_ERRO = '//*[local-name() = "return" and contains( (//*[local-name() = "return"]), ' +
    '"Erro:" )]';

  function RemoveCaracteresInvalidosResposta(const aValue : string) : string;
  begin
    result := StringReplace(aValue, '&amp;', '@@@@@',[rfReplaceAll]);
    result := StringReplace(result, Params.Values['DelimitadorDoCampo'],'',[rfReplaceAll]);
    result := StringReplace(result, Params.Values['DelimitadorDaLinha'],'',[rfReplaceAll]);
    result := StringReplace(result, #13,'',[rfReplaceAll]);
    result := StringReplace(result, #10,'',[rfReplaceAll]);
    result := StringReplace(result,'@@@@@','&amp;',[rfReplaceAll]);
  end;

  function GetMotivo(const aXML:string) : string;
  Var
    _FaultString, _DescErro: string;
  begin
    Result := '';
    if Params.Values['faultstring'] <> '' then
    begin
      if xmlSelectNodeValue(Params.Values['faultstring'], '//*[local-name()="faultstring"]', _FaultString) then
        Result := 'Falha na comunicação com WebService-' +_FaultString
      else
        Result := 'Falha na comunicação com WebService-' + Params.Values['faultstring'];
    end
    else
    begin
      if xmlSelectNodeValue(aXML, XPATH_CANC_ERRO, _DescErro) then
        Result := Format2('%s: %s.', '0', _DescErro)
    end;
    Result := RemoveCaracteresInvalidosResposta(Result);
    Result := StringReplace(result, Chr(9),' ',[rfReplaceAll]);
  end;

  function GetStatus(const aXML:string): string;
  Var
    _str: string;
  begin
    if (Params.Values['faultstring'] <> '') or (xmlSelectNodeValue(aXML, XPATH_CANC_ERRO, _str)) then
      Result := 'ERRO'
    else
      Result := 'SUCESSO';
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to _ListFields.Count - 1 do
      Result := Result + _ListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponseCancelamento : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);

    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','DataCancelamento']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

begin
  _Xml := Params.Values['XML'];
  _Status := GetStatus(_Xml);

  Progress('Adicionando valores aos campos.');
  _ListFields := CreateFieldsResponseCancelamento;
  if _ListFields <> nil then
  Try
    AddValueListFields('Status', _Status);
    if _Status = 'SUCESSO' then
    begin
      AddValueListFields('Motivo', '');
      AddValueListFields('DataCancelamento', '');
    end
    else
    begin
      AddValueListFields('DataCancelamento', '');
      AddValueListFields('Motivo', GetMotivo(_XML));
    end;
    Output := FormatLineResult;
  Finally
    _ListFields.Free;
    Progress('Valores adicionados com sucesso.');
  end;
end.
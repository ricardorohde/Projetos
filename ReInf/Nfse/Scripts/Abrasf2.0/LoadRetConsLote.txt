{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
  Params : TStringList;
}
{$I ..\Abrasf2.0\RemoverEnvelopeXml.txt}
Var
  _Xml, _SituacaoLote: string;
begin
  if Pos('<faultstring',input) > 0 then
    Params.Add('faultstring='+input)
  else
  begin
    Progress('Carregando configurações de XSDDataset.');

    Datasets.ConfigSection := 'RETORNO_CONSULTARLOTE';
    if Trim(MappingXsdFileName) <> '' then
      Datasets.MappingFileName := MappingXsdFileName;

    Progress('Criando XSDDataset.');
    Datasets.CreateXSDDataset;

    _Xml := Input;
    _Xml := StringReplace(_Xml, '&lt;/soap:Envelope&gt;<!--CRLF-->', '&lt;/soap:Envelope&gt;', []);
    _Xml := StringReplace(_Xml, '</soap:Envelope><!--CRLF-->', '</soap:Envelope>', []);

    _Xml := RemoverEnvelopeXml(_Xml, 'ConsultarLoteRps');

    _Xml := XmlDeepNodeSearch(_Xml, Datasets.XsdElementName, '//*[local-name()="ConsultarLoteRpsResposta"]');

    if XmlSelectNodeValue(_Xml,'//*[local-name()="Situacao"]',_SituacaoLote) then
      Params.Add('SituacaoLote='+_SituacaoLote)
    else
      Params.Add('SituacaoLote=');

    Datasets.LoadFromXMLContent(_Xml);

    Params.Add('XmlLote='+_Xml);
    Progress('XML carregado com sucesso.');
  end;
end.
{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Datasets: TspdXSDDataset;
}

Var
  _NFSE, _DSFalha : TSpdXSDClientDataSet;
  _ListFields : TStringList;
  _Motivo : String;

  procedure GetPonteirosDataSets;
  begin
    _NFSE := Datasets.GetDataSetByName('ConsultarNfseRpsResposta');
    _DSFalha := Datasets.GetDataSetByName('MensagemRetorno');
    if (_NFSE = nil) then
      RaiseException('DataSet ConsultarNfseRpsResposta não foi carregado corretamente.');
    if (_DSFalha = nil) then
      RaiseException('DataSet MensagemRetorno não foi carregado corretamente.');
  end;

  function GetMotivo : string;
  begin
    if Params.Values['faultstring'] <> '' then
    begin
      Result := 'Falha na comunicação com WebService-' + Input;
    end
    else if (_DSFalha <> nil) then
    begin
      _DSFalha.First;
      while Not _DSFalha.Eof do
      begin
        if (Result = '') then
          Result := Format3('%s-%s (%s)', _DSFalha.FieldByName('MotivoCodigo').AsString,
                                         Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                         Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString))
        else
          Result := Format4('%s: %s-%s (%s)', Result, _DSFalha.FieldByName('MotivoCodigo').AsString,
                                             Trim(_DSFalha.FieldByName('MotivoMensagem').AsString),
                                             Trim(_DSFalha.FieldByName('MotivoCorrecao').AsString));
        _DSFalha.Next;
      end;
    end;
  end;

  function GetStatus : string;
  begin
    if (Params.Values['faultstring'] = '') and (GetMotivo = '') then
      Result := 'SUCESSO'
    else
      Result := 'ERRO';
  end;

  function GetSituacaoNFSE : string;
  begin
    if (_NFSE.FieldByName('CodigoCancelamento').AsString = '') then
    begin
      if (_DSFalha.FieldByName('MotivoMensagem').AsString <> '') or (Params.Values['faultstring'] <> '') then
        Result := 'ERRO'
      else
        Result := 'AUTORIZADA';
    end
    else
      Result := 'CANCELADA';
  end;

  function GetXmlNFSe : string;
  begin
    Result := XmlSelect(Params.Values['XmlNFSe'], '//*[local-name()="CompNfse"]');
    Result := StringReplace(Result, #10, '|', [rfReplaceAll]); // CR
    Result := StringReplace(Result, #13, '', [rfReplaceAll]); // LF
  end;

  //Função para Capturar a Ordem dos Campos do Params
  function CreateFieldsResponse : TStringList;
  var
    _i: Integer;
  begin
    Result := TStringList.Create;
    Result.Text := StringReplace(Params.Values['ListaCampos'], ',',#13#10,[rfReplaceAll]);
    // Checar se os campos da ListaCampos são suportados
    for _i := 0 to Result.Count - 1 do
    begin
      if not AnsiMatchText(Trim(Result[_i]), ['Status','Motivo','Cnpj','InscMunicipal',
        'SerieRps','NumeroRps','NumeroNFSe','DataEmissaoNFSe','DataAutorizacao',
        'CodVerificacao','Situacao','DataCancelamento','ChaveCancelamento','Xml'
        ,'Tipo']) then
        RaiseException('Campo "' + Result[_i] + '" não suportado')
      else
        Result[_i] := Trim(Result[_i]);
    end;
  end;

  //Função para Capturar a Ordem dos Campos de Falha
  function CreateFieldsResponseFalha : TStringList;
  begin
    Result := TStringList.Create;
    Result.Add('Status');
    Result.Add('Motivo');
  end;

  //Função que passa o valor a lista de resultado
  procedure AddValueListFields(const aParamName, aValue : string);
  begin
    if _ListFields.IndexOf(aParamName) > -1 then
      _ListFields[_ListFields.IndexOf(aParamName)] := aValue;
  end;

  //Função que formata a lista em resposta, considerando DelimitadorDoCampo
  function FormatLineResult(var aListFields : TStringList) : string;
  var
    i : integer;
  begin
    Result := '';
    for i := 0 to aListFields.Count - 1 do
      Result := Result + aListFields[i] + Params.Values['DelimitadorDoCampo']
  end;

  function GetResult(const aListFieldsResult : TStringList) : string;
  begin
    if (Params.Values['DelimitadorDaLinha'] = '') then
      Result := FormatLineResult(aListFieldsResult) + #13#10
    else
      Result := FormatLineResult(aListFieldsResult) +
        Params.Values['DelimitadorDaLinha'];
  end;

begin
  Progress('Obtendo ponteiros dos datasets.');
  GetPonteirosDataSets;
  _Motivo := GetMotivo;

  if _Motivo <> '' then
  begin
    Try
      _ListFields := CreateFieldsResponseFalha;

      AddValueListFields('Status', 'ERRO');
      AddValueListFields('Motivo',_Motivo);

      Output := Output + FormatLineResult(_ListFields) + Params.Values['DelimitadorDaLinha'];
    Finally
      _ListFields.Free;
    end;
  end
  else
  begin
    _NFSE.First;
    while Not _NFSE.Eof Do
    begin
      _ListFields := CreateFieldsResponse;
      if ((_ListFields <> nil) and (_ListFields.Text <> '')) then
      begin
        Try
          AddValueListFields('Status', 'SUCESSO');
          AddValueListFields('Motivo', '');

          if _NFSE.FieldByName('Cnpj').AsString <> '' then
            AddValueListFields('Cnpj', _NFSE.FieldByName('Cnpj').AsString)
          else
            AddValueListFields('Cnpj', _NFSE.FieldByName('Cpf').AsString);

          AddValueListFields('InscMunicipal', _NFSE.FieldByName('InscMunicipal').AsString);
          AddValueListFields('SerieRps', _NFSE.FieldByName('SerieRps').AsString);
          AddValueListFields('NumeroRps', _NFSE.FieldByName('NumeroRps').AsString);
          AddValueListFields('NumeroNFSe', _NFSE.FieldByName('NumeroNFSe').AsString);
          AddValueListFields('DataEmissaoNFSe', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
          AddValueListFields('DataAutorizacao', _NFSE.FieldByName('DataEmissaoNFSe').AsString);
          AddValueListFields('CodVerificacao', _NFSE.FieldByName('CodVerificacao').AsString);
          AddValueListFields('Situacao', GetSituacaoNFSe);
          AddValueListFields('DataCancelamento', _NFSE.FieldByName('DataCancelamento').AsString);
          AddValueListFields('ChaveCancelamento', _NFSE.FieldByName('NumeroNFSe').AsString);
          AddValueListFields('Xml', GetXmlNFSe);
          AddValueListFields('Tipo', _NFSE.FieldByName('Tipo').AsString);

          Output := Output + GetResult(_ListFields);

        Finally
          _ListFields.Free;
        end;
      _NFSE.Next;
      end;
    end;
  end;
  Progress('Valores adicionados com sucesso.');
end.

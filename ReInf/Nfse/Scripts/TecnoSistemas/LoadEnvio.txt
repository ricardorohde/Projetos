{
  Variáveis externas disponíveis:
    PathXsd: string;
    MappingXsdFileName: string;
    Input: string;
    Params: TStringList;
    Datasets: TspdXSDDataset;
}

var
  _Tx2, _CamposMunicipio: TStringList;
  _DsTecnoAtual, _DsCidadeAtual: TSpdXSDClientDataSet;
  _PadraoTecnoNFSe: Boolean;
  _ValorCampo, _NomeCampo, _Linha, _PastaTecnoNFSe: string;
  _Inicio, _QtdeRps, _QtdNumeroLote, x: Integer;
  DSCIDADE_NOTA, DSCIDADE_LOTE, _Cnpj, _NumeroLote, _Qtd: string;

const
  DSTECNO_LOTE = 'TecnoNFSe';
  DSTECNO_NOTA = 'Rps';

{$I ..\Comuns\RotinasLerSetarCampos.txt}
{$I ..\Comuns\FormatarCodigoItemListaServico.txt}
{$I ..\Comuns\EhComando.txt}
{$I ..\Comuns\PrepararTecnoNFSeDatasets.txt}
{$I ..\Comuns\CriarDatasets.txt}
{$I ..\Comuns\CarregarTX2.txt}
{$I ..\Comuns\SetarCamposMunicipio.txt}
{$I ..\Comuns\FormataFloat.txt}
{$I ..\Comuns\Comuns.txt}

  procedure ExceptionValorInvalidoCampo(const aCampo: string);
  begin
    RaiseException('Valor inválido para o campo ' + aCampo);
  end;

  function EnvioSincrono: Boolean;
  begin
    if (UpperCase(Params.Values['EnvioSincrono'])) = 'TRUE' then
      Result := True
  end;

begin
  Progress('Criando XSDDataset');
  CriarDatasets;

  _Tx2 := TStringList.Create;
  _CamposMunicipio := TStringList.Create;

  if EnvioSincrono then
    RaiseException('Envio Síncrono não disponivel');

  try
    Progress('Carregando conteúdo/arquivo TX2');
    CarregarTX2;

    _DsTecnoAtual := nil;

    if _PadraoTecnoNFSe then
    begin
      DSCIDADE_NOTA := 'Rps';

      DSCIDADE_LOTE := 'EnviarLoteRpsSincronoEnvio';

      Progress('Usando Padrão TecnoNFSe: preparando datasets');
      PrepararTecnoNFSeDatasets;

      Progress('Usando Padrão TecnoNFSe: carregando dados das notas');
      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_NOTA);

      _QtdeRps := _DsTecnoAtual.RecordCount;
      _DsTecnoAtual.First;

      while not _DsTecnoAtual.Eof do
      begin
        _DsCidadeAtual.Append;

        // Dados RPS

        SetarCampo('NumeroRps');
        SetarCampo('SerieRps');
        SetarCampo('TipoRps');

        _ValorCampo := CampoTecno('DataEmissao');
        if _ValorCampo <> '' then
        begin
          try
          except
            ExceptionValorInvalidoCampo('DataEmissao');
          end;
          _ValorCampo := FormatAnyDateTime(_ValorCampo, 'YYYY-MM-DD"T"hh:mm:ss');
          SetarCampoValor('DataEmissao', _ValorCampo);
        end;

        _ValorCampo := CampoTecno('SituacaoNota');
        case _ValorCampo of
          '1', '2': SetarCampoValor('Status', CampoTecno('SituacaoNota'))
          else
            ExceptionValorInvalidoCampo('SituacaoNota. Valores aceitos: 1 – Normal, 2 – Cancelado');
        end;

        SetarCampo('NumeroRpsSubstituido');
        SetarCampo('SerieRpsSubstituido');
        SetarCampo('TipoRpsSubstituido');

        //Competencia
        _ValorCampo := CampoTecno('Competencia');
        if _ValorCampo = '' then
          _ValorCampo := CampoCidade('DataEmissao')
        else
        begin
          try
            _ValorCampo := FormatAnyDateTime(_ValorCampo, 'yyyy-mm-dd');
          except
            ExceptionValorInvalidoCampo('Competencia');
          end;
        end;
        if _ValorCampo <> '' then
          SetarCampoValor('Competencia', _ValorCampo);

        //Dados Servico
        SetarCampoValor('BaseCalculoCRS', CampoTecno('BaseCalculo'));
        SetarCampoValor('ValorServicos', CampoTecno('ValorLiquidoNfse'))
        SetarCampoCurrency('ValorServicos', True);
        SetarCampoCurrency('ValorDeducoes', True);
        SetarCampoCurrency('ValorPis', True);
        SetarCampoCurrency('ValorCofins', True);
        SetarCampoCurrency('ValorInss', True);
        SetarCampoCurrency('ValorIr', True);
        SetarCampoCurrency('ValorCsll', True);
        SetarCampoCurrency('OutrasRetencoes', True);
        SetarCampoCurrency('ValorIss', True);

        if DivideCampoPorcentagem(CampoTecno('AliquotaISS')) then
        begin
          _ValorCampo := StringReplace(CampoTecno('AliquotaISS'), ',', '.',[]);
            FormataFloat(StrToFloat(_ValorCampo), 6, 4);
          SetarCampoValor('Aliquota', _ValorCampo);
        end
        else
          ExceptionValorInvalidoCampo('AliquotaISS');

        SetarCampoCurrency('DescontoIncondicionado', true);
        SetarCampoCurrency('DescontoCondicionado', true);
        case AnsiIndexText(CampoTecno('IssRetido'), ['1', 'sim', 'true', '2', 'nao', 'não',
          'false']) of
          0, 1, 2: SetarCampoValor('IssRetido', '1');
          3, 4, 5, 6: SetarCampoValor('IssRetido', '2');
        else
          ExceptionValorInvalidoCampo('IssRetido. Valores aceitos: 1, sim, true, 2, nao, não, false.');
        end;
        { Identificação do responsável pela retenção do ISS
          1 – Tomador
          2 – Intermediário}
        SetarCampo('ResponsavelRetencao');

        _ValorCampo := CampoTecno('CodigoItemListaServico');

        _ValorCampo := FormatarCodigoItemListaServicoSemZeroEsquerda(_ValorCampo, True)


        SetarCampoValor('ItemListaServico', _ValorCampo);

        SetarCampo('CodigoCnae');
        SetarCampo('CodigoTributacaoMunicipio');
        // 2000 caracteres
        SetarCampoValor('Discriminacao', CampoTecno('DiscriminacaoServico'));
        SetarCampoValor('CodigoMunicipio', CampoTecno('CodigoCidadePrestacao'));
        SetarCampo('CodigoPais');
        _ValorCampo := CampoTecno('ExigibilidadeIss');
        if  AnsiMatchText(_ValorCampo, ['1','2','3','4','5','6','7']) then
        begin
          SetarCampo('ExigibilidadeIss');
          SetarCampoValor('NaturezaOperacao', CampoTecno('ExigibilidadeIss'));
        end
        else
          ExceptionValorInvalidoCampo('ExigibilidadeIss. Valores aceitos: 1, 2, 3, 4, 5, 6, 7.');
        SetarCampo('MunicipioIncidencia');

        //Dados Prestador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjPrestador'));
        SetarCampoCpfCnpj('CpfPrestador', 'CnpjPrestador', _ValorCampo);
        SetarCampoValor('InscricaoMunicipalPrestador', RemoveMascara(CampoTecno('InscricaoMunicipalPrestador')));
        SetarCampo('RazaoSocialPrestador');

        _ValorCampo := CampoTecno('CodigoCidadePrestador');
        if _ValorCampo <> '' then
          SetarCampoValor('IdCidade', CampoTecno('CodigoCidadePrestador'))
        else
          RaiseException('Campo CodigoCidadePrestador é obrigatório, deve conter o valor do Código IBGE da cidade do prestador.');

        SetarCampo('PercentualCargaTributaria');
        SetarCampo('ValorCargaTributaria');

        //Dados Tomador
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjTomador'));
        SetarCampoCpfCnpj('CpfTomador', 'CnpjTomador', _ValorCampo);
        SetarCampoValor('InscricaoMunicipalTomador', RemoveMascara(CampoTecno('InscricaoMunicipalTomador')));
        SetarCampo('RazaoSocialTomador');
        SetarCampoValor('Endereco', CampoTecno('EnderecoTomador'));
        SetarCampo('NumeroTomador');
        SetarCampoValor('Complemento', CampoTecno('ComplementoTomador'));
        SetarCampoValor('Bairro', CampoTecno('BairroTomador'));
        SetarCampoValor('CodigoMunicipioTomador', CampoTecno('CodigoCidadeTomador'));
        SetarCampoValor('Uf', CampoTecno('UfTomador'));
        SetarCampoValor('CodigoPaisTomador', CampoTecno('PaisTomador'));
        SetarCampoValor('Cep', CampoTecno('CepTomador'));
        VerificaDDD('TelefoneTomador', 'Telefone', 'DDDTomador');
        SetarCampoValor('Email', CampoTecno('EmailTomador'));

        //Dados Intermediário
        _ValorCampo := RemoveMascara(CampoTecno('CpfCnpjIntermediario'));
        SetarCampoCpfCnpj('CpfIntermediario', 'CnpjIntermediario', _ValorCampo);
        SetarCampo('RazaoSocialIntermediario');

        //Dados Construção Civil
        SetarCampo('CodigoObra');
        SetarCampo('Art');

        //Regime Especial Tributação
        _ValorCampo := CampoTecno('RegimeEspecialTributacao');
        if _ValorCampo <> '' then
        begin
          if  AnsiMatchText(_ValorCampo, ['0','1','2','3','4','5','6']) then
            SetarCampo('RegimeEspecialTributacao')
        end;


        //Optante Simples
        _ValorCampo := CampoTecno('OptanteSimplesNacional');
        case _ValorCampo of
          '1', '2': SetarCampo('OptanteSimplesNacional')
          else
            ExceptionValorInvalidoCampo('OptanteSimplesNacional. Valores aceitos: 1, 2.');
        end;



        //IncentivoFiscal
        SetarCampo('IncentivoFiscal');

        _DsCidadeAtual.Post;
        _DsTecnoAtual.Next;
      end;
      //Setando campos customizados(@)
      SetarCamposMunicipio;

      // Atribuir os campos do lote
      Progress('Usando Padrão TecnoNFSe: carregando dados do lote');
      Datasets.GetDataSetByName(DSCIDADE_LOTE).Insert;

      _DsTecnoAtual := TecnoNFSeDS.GetDataSetByName(DSTECNO_LOTE);
      _DsCidadeAtual := Datasets.GetDataSetByName(DSCIDADE_LOTE);



      // Item do checklist - deduzir campo versão.
      _ValorCampo := CampoTecno('Versao');
      if (_ValorCampo <> '') then
        SetarCampoValor('Versao', _ValorCampo)
      else
        SetarCampoValor('Versao', '2.01');

      SetarCampo('NumeroLote');

      //Dedução campo CpfCnpjRemetente
      _ValorCampo := CampoTecno('CpfCnpjRemetente');
      _Cnpj := RemoveMascara(_ValorCampo);
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName('CpfCnpjPrestador').AsString;
      SetarCampoCpfCnpj('Cpf', 'Cnpj', RemoveMascara(_ValorCampo));

      if CampoTecno('IdLote') <> '' then
        SetarCampo('IdLote');
      //Dedução campo InscricaoMunicipalRemetente
      _ValorCampo := CampoTecno('InscricaoMunicipalRemetente');
      if _ValorCampo = '' then
        _ValorCampo := TecnoNFSeDS.GetDataSetByName(DSTECNO_NOTA).FieldByName(
          'InscricaoMunicipalPrestador').AsString;
      SetarCampoValor('InscricaoMunicipal', RemoveMascara(_ValorCampo));

      //Dedução quantidade
      if CampoTecno('QuantidadeRps') <> '' then
        SetarCampo('QuantidadeRps')
      else
        SetarCampoValor('QuantidadeRps', IntToStr(_QtdeRps));

      Datasets.GetDataSetByName(DSCIDADE_LOTE).Post;
    end
    else
      Datasets.LoadFromTx2Content(_Tx2.Text);
  finally
    _Tx2.free;
    _CamposMunicipio.free;
    Progress('Arquivo TX2 carregado com Sucesso')
  end;
end.
